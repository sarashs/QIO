// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module QIO_accel_hw_int_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        init_val_address0,
        init_val_ce0,
        init_val_q0,
        coef_list_0_address0,
        coef_list_0_ce0,
        coef_list_0_q0,
        coef_list_0_address1,
        coef_list_0_ce1,
        coef_list_0_q1,
        coef_list_1_address0,
        coef_list_1_ce0,
        coef_list_1_q0,
        coef_list_1_address1,
        coef_list_1_ce1,
        coef_list_1_q1,
        coef_list_2_address0,
        coef_list_2_ce0,
        coef_list_2_q0,
        coef_list_2_address1,
        coef_list_2_ce1,
        coef_list_2_q1,
        coef_list_3_address0,
        coef_list_3_ce0,
        coef_list_3_q0,
        coef_list_3_address1,
        coef_list_3_ce1,
        coef_list_3_q1,
        seed,
        final_val_address0,
        final_val_ce0,
        final_val_we0,
        final_val_d0
);

parameter    ap_ST_fsm_state1 = 141'd1;
parameter    ap_ST_fsm_pp0_stage0 = 141'd2;
parameter    ap_ST_fsm_state4 = 141'd4;
parameter    ap_ST_fsm_state5 = 141'd8;
parameter    ap_ST_fsm_state6 = 141'd16;
parameter    ap_ST_fsm_state7 = 141'd32;
parameter    ap_ST_fsm_state8 = 141'd64;
parameter    ap_ST_fsm_state9 = 141'd128;
parameter    ap_ST_fsm_state10 = 141'd256;
parameter    ap_ST_fsm_state11 = 141'd512;
parameter    ap_ST_fsm_state12 = 141'd1024;
parameter    ap_ST_fsm_state13 = 141'd2048;
parameter    ap_ST_fsm_state14 = 141'd4096;
parameter    ap_ST_fsm_state15 = 141'd8192;
parameter    ap_ST_fsm_state16 = 141'd16384;
parameter    ap_ST_fsm_state17 = 141'd32768;
parameter    ap_ST_fsm_state18 = 141'd65536;
parameter    ap_ST_fsm_state19 = 141'd131072;
parameter    ap_ST_fsm_state20 = 141'd262144;
parameter    ap_ST_fsm_state21 = 141'd524288;
parameter    ap_ST_fsm_state22 = 141'd1048576;
parameter    ap_ST_fsm_state23 = 141'd2097152;
parameter    ap_ST_fsm_state24 = 141'd4194304;
parameter    ap_ST_fsm_state25 = 141'd8388608;
parameter    ap_ST_fsm_state26 = 141'd16777216;
parameter    ap_ST_fsm_state27 = 141'd33554432;
parameter    ap_ST_fsm_state28 = 141'd67108864;
parameter    ap_ST_fsm_state29 = 141'd134217728;
parameter    ap_ST_fsm_state30 = 141'd268435456;
parameter    ap_ST_fsm_state31 = 141'd536870912;
parameter    ap_ST_fsm_state32 = 141'd1073741824;
parameter    ap_ST_fsm_state33 = 141'd2147483648;
parameter    ap_ST_fsm_state34 = 141'd4294967296;
parameter    ap_ST_fsm_state35 = 141'd8589934592;
parameter    ap_ST_fsm_state36 = 141'd17179869184;
parameter    ap_ST_fsm_state37 = 141'd34359738368;
parameter    ap_ST_fsm_state38 = 141'd68719476736;
parameter    ap_ST_fsm_state39 = 141'd137438953472;
parameter    ap_ST_fsm_state40 = 141'd274877906944;
parameter    ap_ST_fsm_state41 = 141'd549755813888;
parameter    ap_ST_fsm_state42 = 141'd1099511627776;
parameter    ap_ST_fsm_state43 = 141'd2199023255552;
parameter    ap_ST_fsm_state44 = 141'd4398046511104;
parameter    ap_ST_fsm_state45 = 141'd8796093022208;
parameter    ap_ST_fsm_state46 = 141'd17592186044416;
parameter    ap_ST_fsm_state47 = 141'd35184372088832;
parameter    ap_ST_fsm_state48 = 141'd70368744177664;
parameter    ap_ST_fsm_state49 = 141'd140737488355328;
parameter    ap_ST_fsm_state50 = 141'd281474976710656;
parameter    ap_ST_fsm_state51 = 141'd562949953421312;
parameter    ap_ST_fsm_state52 = 141'd1125899906842624;
parameter    ap_ST_fsm_state53 = 141'd2251799813685248;
parameter    ap_ST_fsm_state54 = 141'd4503599627370496;
parameter    ap_ST_fsm_state55 = 141'd9007199254740992;
parameter    ap_ST_fsm_state56 = 141'd18014398509481984;
parameter    ap_ST_fsm_state57 = 141'd36028797018963968;
parameter    ap_ST_fsm_state58 = 141'd72057594037927936;
parameter    ap_ST_fsm_state59 = 141'd144115188075855872;
parameter    ap_ST_fsm_state60 = 141'd288230376151711744;
parameter    ap_ST_fsm_state61 = 141'd576460752303423488;
parameter    ap_ST_fsm_state62 = 141'd1152921504606846976;
parameter    ap_ST_fsm_state63 = 141'd2305843009213693952;
parameter    ap_ST_fsm_state64 = 141'd4611686018427387904;
parameter    ap_ST_fsm_state65 = 141'd9223372036854775808;
parameter    ap_ST_fsm_state66 = 141'd18446744073709551616;
parameter    ap_ST_fsm_state67 = 141'd36893488147419103232;
parameter    ap_ST_fsm_state68 = 141'd73786976294838206464;
parameter    ap_ST_fsm_state69 = 141'd147573952589676412928;
parameter    ap_ST_fsm_state70 = 141'd295147905179352825856;
parameter    ap_ST_fsm_state71 = 141'd590295810358705651712;
parameter    ap_ST_fsm_state72 = 141'd1180591620717411303424;
parameter    ap_ST_fsm_state73 = 141'd2361183241434822606848;
parameter    ap_ST_fsm_state74 = 141'd4722366482869645213696;
parameter    ap_ST_fsm_state75 = 141'd9444732965739290427392;
parameter    ap_ST_fsm_state76 = 141'd18889465931478580854784;
parameter    ap_ST_fsm_state77 = 141'd37778931862957161709568;
parameter    ap_ST_fsm_state78 = 141'd75557863725914323419136;
parameter    ap_ST_fsm_state79 = 141'd151115727451828646838272;
parameter    ap_ST_fsm_state80 = 141'd302231454903657293676544;
parameter    ap_ST_fsm_state81 = 141'd604462909807314587353088;
parameter    ap_ST_fsm_state82 = 141'd1208925819614629174706176;
parameter    ap_ST_fsm_state83 = 141'd2417851639229258349412352;
parameter    ap_ST_fsm_state84 = 141'd4835703278458516698824704;
parameter    ap_ST_fsm_state85 = 141'd9671406556917033397649408;
parameter    ap_ST_fsm_state86 = 141'd19342813113834066795298816;
parameter    ap_ST_fsm_state87 = 141'd38685626227668133590597632;
parameter    ap_ST_fsm_state88 = 141'd77371252455336267181195264;
parameter    ap_ST_fsm_state89 = 141'd154742504910672534362390528;
parameter    ap_ST_fsm_state90 = 141'd309485009821345068724781056;
parameter    ap_ST_fsm_state91 = 141'd618970019642690137449562112;
parameter    ap_ST_fsm_state92 = 141'd1237940039285380274899124224;
parameter    ap_ST_fsm_state93 = 141'd2475880078570760549798248448;
parameter    ap_ST_fsm_state94 = 141'd4951760157141521099596496896;
parameter    ap_ST_fsm_state95 = 141'd9903520314283042199192993792;
parameter    ap_ST_fsm_state96 = 141'd19807040628566084398385987584;
parameter    ap_ST_fsm_state97 = 141'd39614081257132168796771975168;
parameter    ap_ST_fsm_state98 = 141'd79228162514264337593543950336;
parameter    ap_ST_fsm_state99 = 141'd158456325028528675187087900672;
parameter    ap_ST_fsm_state100 = 141'd316912650057057350374175801344;
parameter    ap_ST_fsm_state101 = 141'd633825300114114700748351602688;
parameter    ap_ST_fsm_state102 = 141'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state103 = 141'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state104 = 141'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state105 = 141'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state106 = 141'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state107 = 141'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state108 = 141'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state109 = 141'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state110 = 141'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state111 = 141'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state112 = 141'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state113 = 141'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state114 = 141'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state115 = 141'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state116 = 141'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state117 = 141'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state118 = 141'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state119 = 141'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state120 = 141'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state121 = 141'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state122 = 141'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state123 = 141'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state124 = 141'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state125 = 141'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state126 = 141'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state127 = 141'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state128 = 141'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state129 = 141'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state130 = 141'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state131 = 141'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state132 = 141'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state133 = 141'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state134 = 141'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state135 = 141'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state136 = 141'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state137 = 141'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state138 = 141'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state139 = 141'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state140 = 141'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_pp1_stage0 = 141'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state143 = 141'd1393796574908163946345982392040522594123776;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] init_val_address0;
output   init_val_ce0;
input  [31:0] init_val_q0;
output  [13:0] coef_list_0_address0;
output   coef_list_0_ce0;
input  [31:0] coef_list_0_q0;
output  [13:0] coef_list_0_address1;
output   coef_list_0_ce1;
input  [31:0] coef_list_0_q1;
output  [13:0] coef_list_1_address0;
output   coef_list_1_ce0;
input  [31:0] coef_list_1_q0;
output  [13:0] coef_list_1_address1;
output   coef_list_1_ce1;
input  [31:0] coef_list_1_q1;
output  [13:0] coef_list_2_address0;
output   coef_list_2_ce0;
input  [31:0] coef_list_2_q0;
output  [13:0] coef_list_2_address1;
output   coef_list_2_ce1;
input  [31:0] coef_list_2_q1;
output  [13:0] coef_list_3_address0;
output   coef_list_3_ce0;
input  [31:0] coef_list_3_q0;
output  [13:0] coef_list_3_address1;
output   coef_list_3_ce1;
input  [31:0] coef_list_3_q1;
input  [31:0] seed;
output  [7:0] final_val_address0;
output   final_val_ce0;
output   final_val_we0;
output  [31:0] final_val_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg init_val_ce0;
reg[13:0] coef_list_0_address0;
reg coef_list_0_ce0;
reg[13:0] coef_list_0_address1;
reg coef_list_0_ce1;
reg[13:0] coef_list_1_address0;
reg coef_list_1_ce0;
reg[13:0] coef_list_1_address1;
reg coef_list_1_ce1;
reg[13:0] coef_list_2_address0;
reg coef_list_2_ce0;
reg[13:0] coef_list_2_address1;
reg coef_list_2_ce1;
reg[13:0] coef_list_3_address0;
reg coef_list_3_ce0;
reg[13:0] coef_list_3_address1;
reg coef_list_3_ce1;
reg final_val_ce0;
reg final_val_we0;

(* fsm_encoding = "none" *) reg   [140:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] i_0_reg_694;
reg   [8:0] i4_0_reg_773;
wire   [31:0] grp_Galois_LFSR_32_33_hw_fu_785_ap_return;
reg   [31:0] reg_906;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state98;
wire   [63:0] grp_fu_848_p1;
reg   [63:0] reg_913;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state104;
wire   [31:0] grp_fu_801_p2;
reg   [31:0] reg_919;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state77;
wire   [31:0] grp_fu_805_p2;
reg   [31:0] reg_925;
reg   [31:0] reg_931;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state78;
reg   [31:0] reg_937;
wire   [31:0] grp_fu_796_p2;
reg   [31:0] reg_943;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state92;
wire   [31:0] rnd_input_fu_948_p2;
reg   [31:0] rnd_input_reg_1792;
wire   [0:0] icmp_ln17_fu_954_p2;
reg   [0:0] icmp_ln17_reg_1797;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [8:0] i_fu_960_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] zext_ln18_fu_966_p1;
reg   [63:0] zext_ln18_reg_1806;
reg   [2:0] trunc_ln18_1_reg_1816;
wire   [5:0] trunc_ln18_fu_981_p1;
reg   [5:0] trunc_ln18_reg_1820;
wire   [0:0] icmp_ln22_fu_997_p2;
wire    ap_CS_fsm_state5;
wire   [16:0] i_3_fu_1003_p2;
reg   [16:0] i_3_reg_1836;
reg   [31:0] rnd_out_1_reg_1841;
wire    ap_CS_fsm_state7;
reg   [31:0] rnd_out_2_reg_1847;
wire    ap_CS_fsm_state8;
reg   [63:0] tmp_6_reg_1853;
wire    ap_CS_fsm_state14;
wire   [63:0] grp_fu_851_p1;
reg   [63:0] tmp_9_reg_1858;
wire   [63:0] grp_fu_827_p2;
reg   [63:0] tmp_3_reg_1863;
wire    ap_CS_fsm_state18;
reg   [63:0] tmp_7_reg_1868;
wire    ap_CS_fsm_state20;
wire   [63:0] grp_fu_833_p2;
reg   [63:0] tmp_s_reg_1873;
reg   [10:0] tmp_V_reg_1878;
wire    ap_CS_fsm_state49;
wire   [51:0] tmp_V_1_fu_1023_p1;
reg   [51:0] tmp_V_1_reg_1884;
wire   [0:0] isNeg_fu_1036_p3;
reg   [0:0] isNeg_reg_1889;
wire    ap_CS_fsm_state50;
wire   [11:0] ush_fu_1053_p3;
reg   [11:0] ush_reg_1894;
reg   [31:0] val_V_reg_1899;
wire    ap_CS_fsm_state51;
reg   [10:0] tmp_V_2_reg_1904;
wire   [51:0] tmp_V_3_fu_1132_p1;
reg   [51:0] tmp_V_3_reg_1910;
reg   [10:0] tmp_V_4_reg_1915;
wire   [51:0] tmp_V_5_fu_1150_p1;
reg   [51:0] tmp_V_5_reg_1921;
reg   [25:0] trunc_ln37_1_reg_1926;
reg   [5:0] current_val_0_addr_1_reg_1931;
reg   [5:0] current_val_1_addr_1_reg_1937;
reg   [5:0] current_val_2_addr_1_reg_1943;
reg   [5:0] current_val_3_addr_1_reg_1949;
wire   [31:0] val_V_1_fu_1275_p3;
reg   [31:0] val_V_1_reg_1955;
wire    ap_CS_fsm_state52;
wire   [0:0] icmp_ln36_fu_1384_p2;
reg   [0:0] icmp_ln36_reg_1961;
wire   [63:0] zext_ln37_fu_1390_p1;
reg   [63:0] zext_ln37_reg_1965;
wire   [31:0] tmp_8_fu_1396_p6;
reg   [31:0] tmp_8_reg_1972;
wire   [8:0] i_2_fu_1426_p2;
reg   [8:0] i_2_reg_1981;
wire    ap_CS_fsm_state54;
reg   [2:0] lshr_ln1_reg_1986;
wire   [0:0] icmp_ln47_fu_1420_p2;
wire   [5:0] trunc_ln48_fu_1442_p1;
reg   [5:0] trunc_ln48_reg_1991;
wire   [31:0] zext_ln48_1_fu_1454_p1;
reg   [31:0] zext_ln48_1_reg_2019;
wire    ap_CS_fsm_state55;
wire   [31:0] current_val_cash_fu_1457_p6;
reg   [31:0] current_val_cash_reg_2025;
wire   [14:0] zext_ln48_2_fu_1478_p1;
reg   [14:0] zext_ln48_2_reg_2030;
wire    ap_CS_fsm_state61;
wire   [31:0] grp_fu_814_p1;
reg   [31:0] tmp_12_reg_2035;
wire   [5:0] trunc_ln51_fu_1488_p1;
reg   [5:0] trunc_ln51_reg_2044;
wire    ap_CS_fsm_state62;
wire   [0:0] icmp_ln50_fu_1482_p2;
wire   [14:0] add_ln51_fu_1518_p2;
reg   [14:0] add_ln51_reg_2090;
wire    ap_CS_fsm_state63;
wire   [31:0] zext_ln51_4_fu_1533_p1;
reg   [31:0] zext_ln51_4_reg_2095;
wire   [31:0] grp_fu_854_p6;
reg   [31:0] tmp_19_reg_2101;
wire   [7:0] empty_42_fu_1539_p1;
reg   [7:0] empty_42_reg_2106;
wire   [31:0] grp_fu_867_p6;
reg   [31:0] tmp_23_reg_2113;
wire   [8:0] add_ln50_fu_1569_p2;
reg   [8:0] add_ln50_reg_2158;
reg   [31:0] tmp_25_reg_2163;
wire    ap_CS_fsm_state64;
reg   [31:0] tmp_27_reg_2168;
reg   [31:0] tmp_18_reg_2173;
wire    ap_CS_fsm_state69;
wire   [31:0] grp_fu_817_p1;
reg   [31:0] tmp_13_1_reg_2178;
reg   [31:0] tmp_13_2_reg_2183;
wire    ap_CS_fsm_state70;
reg   [31:0] tmp_13_3_reg_2188;
wire    ap_CS_fsm_state72;
wire   [31:0] grp_fu_880_p6;
reg   [31:0] tmp_21_reg_2233;
wire   [31:0] grp_fu_893_p6;
reg   [31:0] tmp_24_reg_2238;
reg   [31:0] tmp_26_reg_2283;
reg   [31:0] tmp_28_reg_2288;
wire    ap_CS_fsm_state97;
wire    ap_CS_fsm_state122;
wire   [63:0] grp_fu_838_p2;
reg   [63:0] tmp_5_reg_2303;
wire    ap_CS_fsm_state135;
wire   [31:0] grp_fu_820_p1;
reg   [31:0] random_reg_2308;
wire    ap_CS_fsm_state137;
wire   [31:0] grp_fu_809_p2;
reg   [31:0] tmp_10_reg_2314;
wire   [0:0] icmp_ln58_fu_1680_p2;
reg   [0:0] icmp_ln58_reg_2320;
wire    ap_CS_fsm_state138;
wire   [0:0] icmp_ln58_1_fu_1686_p2;
reg   [0:0] icmp_ln58_1_reg_2325;
wire   [0:0] icmp_ln58_2_fu_1692_p2;
reg   [0:0] icmp_ln58_2_reg_2330;
wire   [0:0] icmp_ln58_3_fu_1698_p2;
reg   [0:0] icmp_ln58_3_reg_2335;
wire   [0:0] and_ln58_1_fu_1718_p2;
reg   [0:0] and_ln58_1_reg_2340;
wire    ap_CS_fsm_state139;
wire   [7:0] new_val_addr_3_gep_fu_642_p3;
wire   [0:0] icmp_ln64_fu_1729_p2;
reg   [0:0] icmp_ln64_reg_2349;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state141_pp1_stage0_iter0;
wire    ap_block_state142_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [8:0] i_1_fu_1735_p2;
reg   [8:0] i_1_reg_2353;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state141;
reg    ap_enable_reg_pp1_iter1;
reg   [5:0] current_val_0_address0;
reg    current_val_0_ce0;
reg    current_val_0_we0;
wire   [31:0] current_val_0_q0;
reg   [5:0] current_val_0_address1;
reg    current_val_0_ce1;
reg    current_val_0_we1;
wire   [31:0] current_val_0_q1;
reg   [5:0] current_val_1_address0;
reg    current_val_1_ce0;
reg    current_val_1_we0;
wire   [31:0] current_val_1_q0;
reg   [5:0] current_val_1_address1;
reg    current_val_1_ce1;
reg    current_val_1_we1;
wire   [31:0] current_val_1_q1;
reg   [5:0] current_val_2_address0;
reg    current_val_2_ce0;
reg    current_val_2_we0;
wire   [31:0] current_val_2_q0;
reg   [5:0] current_val_2_address1;
reg    current_val_2_ce1;
reg    current_val_2_we1;
wire   [31:0] current_val_2_q1;
reg   [5:0] current_val_3_address0;
reg    current_val_3_ce0;
reg    current_val_3_we0;
wire   [31:0] current_val_3_q0;
reg   [5:0] current_val_3_address1;
reg    current_val_3_ce1;
reg    current_val_3_we1;
wire   [31:0] current_val_3_q1;
reg   [7:0] new_val_address0;
reg    new_val_ce0;
reg    new_val_we0;
reg   [31:0] new_val_d0;
wire   [31:0] new_val_q0;
reg    grp_Galois_LFSR_32_33_hw_fu_785_ap_start;
wire    grp_Galois_LFSR_32_33_hw_fu_785_ap_done;
wire    grp_Galois_LFSR_32_33_hw_fu_785_ap_idle;
wire    grp_Galois_LFSR_32_33_hw_fu_785_ap_ready;
reg   [31:0] grp_Galois_LFSR_32_33_hw_fu_785_input_r;
reg   [31:0] rnd_input_0_reg_705;
wire    ap_CS_fsm_state140;
wire    ap_CS_fsm_state4;
reg   [16:0] i1_0_reg_715;
reg   [31:0] cost_old_reg_726;
wire    ap_CS_fsm_state53;
reg   [8:0] i3_0_reg_738;
reg   [31:0] cost_new2_1_0_reg_749;
reg   [8:0] j_0_0_reg_761;
reg   [8:0] ap_phi_mux_i4_0_phi_fu_777_p4;
wire    ap_block_pp1_stage0;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln18_1_fu_985_p1;
wire   [63:0] zext_ln37_1_fu_1174_p1;
wire   [7:0] new_val_addr_1_gep_fu_315_p3;
wire   [63:0] zext_ln48_fu_1446_p1;
wire   [63:0] zext_ln51_1_fu_1492_p1;
wire   [63:0] zext_ln51_3_fu_1506_p1;
wire   [63:0] zext_ln51_5_fu_1548_p1;
wire   [63:0] zext_ln51_7_fu_1561_p1;
wire   [63:0] zext_ln51_2_fu_1575_p1;
wire   [63:0] zext_ln51_6_fu_1594_p1;
wire   [63:0] zext_ln51_8_fu_1614_p1;
wire   [63:0] zext_ln51_9_fu_1634_p1;
wire   [63:0] zext_ln66_1_fu_1745_p1;
wire   [63:0] zext_ln66_fu_1753_p1;
reg   [31:0] cost_old_1_fu_192;
wire   [31:0] sub_ln40_fu_1410_p2;
wire   [31:0] add_ln37_fu_1415_p2;
wire   [31:0] tmp_13_fu_1772_p6;
reg   [31:0] grp_fu_796_p0;
reg   [31:0] grp_fu_796_p1;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state93;
reg   [31:0] grp_fu_801_p0;
reg   [31:0] grp_fu_801_p1;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state75;
reg   [31:0] grp_fu_805_p0;
reg   [31:0] grp_fu_805_p1;
reg   [31:0] grp_fu_814_p0;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state65;
reg   [31:0] grp_fu_817_p0;
wire    ap_CS_fsm_state136;
reg   [63:0] grp_fu_827_p0;
reg   [63:0] grp_fu_827_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
reg   [63:0] grp_fu_838_p0;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state105;
reg   [31:0] grp_fu_848_p0;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state99;
reg   [31:0] grp_fu_854_p5;
reg   [31:0] grp_fu_867_p5;
wire   [63:0] p_Val2_s_fu_1009_p1;
wire   [11:0] zext_ln502_fu_1027_p1;
wire   [11:0] add_ln502_fu_1030_p2;
wire   [10:0] sub_ln1311_fu_1044_p2;
wire  signed [11:0] sext_ln1311_fu_1049_p1;
wire   [53:0] mantissa_V_fu_1061_p4;
wire  signed [31:0] sext_ln1311_1_fu_1074_p1;
wire   [53:0] zext_ln1285_fu_1081_p1;
wire   [53:0] r_V_fu_1085_p2;
wire   [136:0] zext_ln682_fu_1070_p1;
wire   [136:0] zext_ln1287_fu_1077_p1;
wire   [136:0] zext_ln1287_3_fu_1091_p1;
wire   [136:0] r_V_1_fu_1095_p2;
wire   [136:0] r_V_7_fu_1101_p3;
wire   [63:0] p_Val2_5_fu_1118_p1;
wire   [63:0] grp_fu_843_p2;
wire   [63:0] p_Val2_9_fu_1136_p1;
wire   [5:0] trunc_ln1_fu_1164_p4;
wire   [53:0] mantissa_V_1_fu_1182_p4;
wire   [11:0] zext_ln502_1_fu_1195_p1;
wire   [11:0] add_ln502_1_fu_1198_p2;
wire   [10:0] sub_ln1311_1_fu_1212_p2;
wire   [0:0] isNeg_1_fu_1204_p3;
wire  signed [11:0] sext_ln1311_2_fu_1217_p1;
wire   [11:0] ush_1_fu_1221_p3;
wire  signed [31:0] sext_ln1311_3_fu_1229_p1;
wire   [53:0] zext_ln1285_1_fu_1237_p1;
wire   [136:0] zext_ln682_1_fu_1191_p1;
wire   [136:0] zext_ln1287_1_fu_1233_p1;
wire   [53:0] r_V_3_fu_1241_p2;
wire   [0:0] tmp_32_fu_1253_p3;
wire   [136:0] r_V_4_fu_1247_p2;
wire   [31:0] zext_ln662_fu_1261_p1;
wire   [31:0] tmp_29_fu_1265_p4;
wire   [53:0] mantissa_V_2_fu_1283_p4;
wire   [11:0] zext_ln502_2_fu_1296_p1;
wire   [11:0] add_ln502_2_fu_1299_p2;
wire   [10:0] sub_ln1311_2_fu_1313_p2;
wire   [0:0] isNeg_2_fu_1305_p3;
wire  signed [11:0] sext_ln1311_4_fu_1318_p1;
wire   [11:0] ush_2_fu_1322_p3;
wire  signed [31:0] sext_ln1311_5_fu_1330_p1;
wire   [53:0] zext_ln1285_2_fu_1338_p1;
wire   [136:0] zext_ln682_2_fu_1292_p1;
wire   [136:0] zext_ln1287_2_fu_1334_p1;
wire   [53:0] r_V_5_fu_1342_p2;
wire   [0:0] tmp_39_fu_1354_p3;
wire   [136:0] r_V_6_fu_1348_p2;
wire   [31:0] zext_ln662_1_fu_1362_p1;
wire   [31:0] tmp_30_fu_1366_p4;
wire   [31:0] val_V_2_fu_1376_p3;
wire   [31:0] tmp_8_fu_1396_p5;
wire   [31:0] current_val_cash_fu_1457_p5;
wire   [13:0] tmp_31_fu_1471_p3;
wire   [5:0] or_ln51_fu_1500_p2;
wire   [14:0] zext_ln51_fu_1514_p1;
wire   [2:0] lshr_ln2_fu_1523_p4;
wire   [5:0] or_ln51_1_fu_1543_p2;
wire   [5:0] or_ln51_2_fu_1556_p2;
wire   [7:0] or_ln50_fu_1582_p2;
wire   [13:0] tmp_33_fu_1587_p3;
wire   [7:0] or_ln50_1_fu_1602_p2;
wire   [13:0] tmp_34_fu_1607_p3;
wire   [7:0] or_ln50_2_fu_1622_p2;
wire   [13:0] tmp_35_fu_1627_p3;
wire   [31:0] bitcast_ln58_fu_1646_p1;
wire   [31:0] bitcast_ln58_1_fu_1663_p1;
wire   [7:0] tmp_14_fu_1649_p4;
wire   [22:0] trunc_ln58_fu_1659_p1;
wire   [7:0] tmp_15_fu_1666_p4;
wire   [22:0] trunc_ln58_1_fu_1676_p1;
wire   [0:0] or_ln58_fu_1704_p2;
wire   [0:0] or_ln58_1_fu_1708_p2;
wire   [0:0] and_ln58_fu_1712_p2;
wire   [0:0] grp_fu_823_p2;
wire   [5:0] trunc_ln66_fu_1741_p1;
wire   [2:0] lshr_ln_fu_1758_p4;
wire   [31:0] tmp_13_fu_1772_p5;
wire    ap_CS_fsm_state143;
reg   [140:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 141'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

QIO_accel_hw_int_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
current_val_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(current_val_0_address0),
    .ce0(current_val_0_ce0),
    .we0(current_val_0_we0),
    .d0(init_val_q0),
    .q0(current_val_0_q0),
    .address1(current_val_0_address1),
    .ce1(current_val_0_ce1),
    .we1(current_val_0_we1),
    .d1(new_val_q0),
    .q1(current_val_0_q1)
);

QIO_accel_hw_int_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
current_val_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(current_val_1_address0),
    .ce0(current_val_1_ce0),
    .we0(current_val_1_we0),
    .d0(init_val_q0),
    .q0(current_val_1_q0),
    .address1(current_val_1_address1),
    .ce1(current_val_1_ce1),
    .we1(current_val_1_we1),
    .d1(new_val_q0),
    .q1(current_val_1_q1)
);

QIO_accel_hw_int_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
current_val_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(current_val_2_address0),
    .ce0(current_val_2_ce0),
    .we0(current_val_2_we0),
    .d0(init_val_q0),
    .q0(current_val_2_q0),
    .address1(current_val_2_address1),
    .ce1(current_val_2_ce1),
    .we1(current_val_2_we1),
    .d1(new_val_q0),
    .q1(current_val_2_q1)
);

QIO_accel_hw_int_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
current_val_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(current_val_3_address0),
    .ce0(current_val_3_ce0),
    .we0(current_val_3_we0),
    .d0(init_val_q0),
    .q0(current_val_3_q0),
    .address1(current_val_3_address1),
    .ce1(current_val_3_ce1),
    .we1(current_val_3_we1),
    .d1(new_val_q0),
    .q1(current_val_3_q1)
);

QIO_accel_hw_int_fYi #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
new_val_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(new_val_address0),
    .ce0(new_val_ce0),
    .we0(new_val_we0),
    .d0(new_val_d0),
    .q0(new_val_q0)
);

Galois_LFSR_32_33_hw grp_Galois_LFSR_32_33_hw_fu_785(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Galois_LFSR_32_33_hw_fu_785_ap_start),
    .ap_done(grp_Galois_LFSR_32_33_hw_fu_785_ap_done),
    .ap_idle(grp_Galois_LFSR_32_33_hw_fu_785_ap_idle),
    .ap_ready(grp_Galois_LFSR_32_33_hw_fu_785_ap_ready),
    .input_r(grp_Galois_LFSR_32_33_hw_fu_785_input_r),
    .seed_V(seed),
    .ap_return(grp_Galois_LFSR_32_33_hw_fu_785_ap_return)
);

QIO_accel_fadd_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
QIO_accel_fadd_32g8j_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_796_p0),
    .din1(grp_fu_796_p1),
    .ce(1'b1),
    .dout(grp_fu_796_p2)
);

QIO_accel_fmul_32hbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
QIO_accel_fmul_32hbi_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_801_p0),
    .din1(grp_fu_801_p1),
    .ce(1'b1),
    .dout(grp_fu_801_p2)
);

QIO_accel_fmul_32hbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
QIO_accel_fmul_32hbi_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_805_p0),
    .din1(grp_fu_805_p1),
    .ce(1'b1),
    .dout(grp_fu_805_p2)
);

QIO_accel_fdiv_32ibs #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
QIO_accel_fdiv_32ibs_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(cost_old_reg_726),
    .din1(cost_old_1_fu_192),
    .ce(1'b1),
    .dout(grp_fu_809_p2)
);

QIO_accel_sitofp_jbC #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
QIO_accel_sitofp_jbC_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_814_p0),
    .ce(1'b1),
    .dout(grp_fu_814_p1)
);

QIO_accel_sitofp_jbC #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
QIO_accel_sitofp_jbC_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_817_p0),
    .ce(1'b1),
    .dout(grp_fu_817_p1)
);

QIO_accel_fptrunckbM #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
QIO_accel_fptrunckbM_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_5_reg_2303),
    .ce(1'b1),
    .dout(grp_fu_820_p1)
);

QIO_accel_fcmp_32lbW #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
QIO_accel_fcmp_32lbW_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(random_reg_2308),
    .din1(tmp_10_reg_2314),
    .ce(1'b1),
    .opcode(5'd5),
    .dout(grp_fu_823_p2)
);

QIO_accel_dmul_64mb6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
QIO_accel_dmul_64mb6_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_827_p0),
    .din1(grp_fu_827_p1),
    .ce(1'b1),
    .dout(grp_fu_827_p2)
);

QIO_accel_dmul_64mb6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
QIO_accel_dmul_64mb6_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_9_reg_1858),
    .din1(64'd4611686018427387904),
    .ce(1'b1),
    .dout(grp_fu_833_p2)
);

QIO_accel_ddiv_64ncg #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
QIO_accel_ddiv_64ncg_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_838_p0),
    .din1(64'd4751297606873776128),
    .ce(1'b1),
    .dout(grp_fu_838_p2)
);

QIO_accel_ddiv_64ncg #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
QIO_accel_ddiv_64ncg_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_s_reg_1873),
    .din1(64'd4751297606873776128),
    .ce(1'b1),
    .dout(grp_fu_843_p2)
);

QIO_accel_uitodp_ocq #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
QIO_accel_uitodp_ocq_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_848_p0),
    .ce(1'b1),
    .dout(grp_fu_848_p1)
);

QIO_accel_uitodp_ocq #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
QIO_accel_uitodp_ocq_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(rnd_out_2_reg_1847),
    .ce(1'b1),
    .dout(grp_fu_851_p1)
);

QIO_accel_mux_432pcA #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
QIO_accel_mux_432pcA_U17(
    .din0(current_val_0_q0),
    .din1(current_val_1_q0),
    .din2(current_val_2_q0),
    .din3(current_val_3_q0),
    .din4(grp_fu_854_p5),
    .dout(grp_fu_854_p6)
);

QIO_accel_mux_432pcA #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
QIO_accel_mux_432pcA_U18(
    .din0(current_val_0_q1),
    .din1(current_val_1_q1),
    .din2(current_val_2_q1),
    .din3(current_val_3_q1),
    .din4(grp_fu_867_p5),
    .dout(grp_fu_867_p6)
);

QIO_accel_mux_432pcA #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
QIO_accel_mux_432pcA_U19(
    .din0(coef_list_0_q0),
    .din1(coef_list_1_q0),
    .din2(coef_list_2_q0),
    .din3(coef_list_3_q0),
    .din4(zext_ln48_1_reg_2019),
    .dout(grp_fu_880_p6)
);

QIO_accel_mux_432pcA #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
QIO_accel_mux_432pcA_U20(
    .din0(coef_list_0_q1),
    .din1(coef_list_1_q1),
    .din2(coef_list_2_q1),
    .din3(coef_list_3_q1),
    .din4(zext_ln48_1_reg_2019),
    .dout(grp_fu_893_p6)
);

QIO_accel_mux_432pcA #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
QIO_accel_mux_432pcA_U21(
    .din0(current_val_0_q0),
    .din1(current_val_1_q0),
    .din2(current_val_2_q0),
    .din3(current_val_3_q0),
    .din4(tmp_8_fu_1396_p5),
    .dout(tmp_8_fu_1396_p6)
);

QIO_accel_mux_432pcA #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
QIO_accel_mux_432pcA_U22(
    .din0(current_val_0_q0),
    .din1(current_val_1_q0),
    .din2(current_val_2_q0),
    .din3(current_val_3_q0),
    .din4(current_val_cash_fu_1457_p5),
    .dout(current_val_cash_fu_1457_p6)
);

QIO_accel_mux_432pcA #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
QIO_accel_mux_432pcA_U23(
    .din0(current_val_0_q1),
    .din1(current_val_1_q1),
    .din2(current_val_2_q1),
    .din3(current_val_3_q1),
    .din4(tmp_13_fu_1772_p5),
    .dout(tmp_13_fu_1772_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state141) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln22_fu_997_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state141))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state141);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((icmp_ln22_fu_997_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        cost_new2_1_0_reg_749 <= grp_fu_796_p2;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        cost_new2_1_0_reg_749 <= cost_old_reg_726;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln58_1_reg_2340) & (1'b1 == ap_CS_fsm_state140))) begin
        cost_old_1_fu_192 <= cost_old_reg_726;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        cost_old_1_fu_192 <= 32'd1315859240;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_1482_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state62))) begin
        cost_old_reg_726 <= cost_new2_1_0_reg_749;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        cost_old_reg_726 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i1_0_reg_715 <= 17'd0;
    end else if ((1'b1 == ap_CS_fsm_state140)) begin
        i1_0_reg_715 <= i_3_reg_1836;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_1482_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state62))) begin
        i3_0_reg_738 <= i_2_reg_1981;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        i3_0_reg_738 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_997_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i4_0_reg_773 <= 9'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln64_reg_2349 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i4_0_reg_773 <= i_1_reg_2353;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln17_fu_954_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_694 <= i_fu_960_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_694 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        j_0_0_reg_761 <= add_ln50_reg_2158;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        j_0_0_reg_761 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        rnd_input_0_reg_705 <= rnd_input_reg_1792;
    end else if ((1'b1 == ap_CS_fsm_state140)) begin
        rnd_input_0_reg_705 <= reg_906;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        add_ln50_reg_2158 <= add_ln50_fu_1569_p2;
        add_ln51_reg_2090 <= add_ln51_fu_1518_p2;
        empty_42_reg_2106 <= empty_42_fu_1539_p1;
        tmp_19_reg_2101 <= grp_fu_854_p6;
        tmp_23_reg_2113 <= grp_fu_867_p6;
        zext_ln51_4_reg_2095[2 : 0] <= zext_ln51_4_fu_1533_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state139)) begin
        and_ln58_1_reg_2340 <= and_ln58_1_fu_1718_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        current_val_0_addr_1_reg_1931 <= zext_ln37_1_fu_1174_p1;
        current_val_1_addr_1_reg_1937 <= zext_ln37_1_fu_1174_p1;
        current_val_2_addr_1_reg_1943 <= zext_ln37_1_fu_1174_p1;
        current_val_3_addr_1_reg_1949 <= zext_ln37_1_fu_1174_p1;
        tmp_V_2_reg_1904 <= {{p_Val2_5_fu_1118_p1[62:52]}};
        tmp_V_3_reg_1910 <= tmp_V_3_fu_1132_p1;
        tmp_V_4_reg_1915 <= {{p_Val2_9_fu_1136_p1[62:52]}};
        tmp_V_5_reg_1921 <= tmp_V_5_fu_1150_p1;
        trunc_ln37_1_reg_1926 <= {{r_V_7_fu_1101_p3[84:59]}};
        val_V_reg_1899 <= {{r_V_7_fu_1101_p3[84:53]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        current_val_cash_reg_2025 <= current_val_cash_fu_1457_p6;
        zext_ln48_1_reg_2019[2 : 0] <= zext_ln48_1_fu_1454_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_1_reg_2353 <= i_1_fu_1735_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        i_2_reg_1981 <= i_2_fu_1426_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_3_reg_1836 <= i_3_fu_1003_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln17_reg_1797 <= icmp_ln17_fu_954_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        icmp_ln36_reg_1961 <= icmp_ln36_fu_1384_p2;
        tmp_8_reg_1972 <= tmp_8_fu_1396_p6;
        val_V_1_reg_1955 <= val_V_1_fu_1275_p3;
        zext_ln37_reg_1965[31 : 0] <= zext_ln37_fu_1390_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state138)) begin
        icmp_ln58_1_reg_2325 <= icmp_ln58_1_fu_1686_p2;
        icmp_ln58_2_reg_2330 <= icmp_ln58_2_fu_1692_p2;
        icmp_ln58_3_reg_2335 <= icmp_ln58_3_fu_1698_p2;
        icmp_ln58_reg_2320 <= icmp_ln58_fu_1680_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln64_reg_2349 <= icmp_ln64_fu_1729_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        isNeg_reg_1889 <= add_ln502_fu_1030_p2[32'd11];
        ush_reg_1894 <= ush_fu_1053_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln47_fu_1420_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state54))) begin
        lshr_ln1_reg_1986 <= {{i3_0_reg_738[8:6]}};
        trunc_ln48_reg_1991 <= trunc_ln48_fu_1442_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state137)) begin
        random_reg_2308 <= grp_fu_820_p1;
        tmp_10_reg_2314 <= grp_fu_809_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_906 <= grp_Galois_LFSR_32_33_hw_fu_785_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_913 <= grp_fu_848_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state73))) begin
        reg_919 <= grp_fu_801_p2;
        reg_925 <= grp_fu_805_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state74))) begin
        reg_931 <= grp_fu_801_p2;
        reg_937 <= grp_fu_805_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state82))) begin
        reg_943 <= grp_fu_796_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rnd_input_reg_1792[31 : 14] <= rnd_input_fu_948_p2[31 : 14];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        rnd_out_1_reg_1841 <= grp_Galois_LFSR_32_33_hw_fu_785_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        rnd_out_2_reg_1847 <= grp_Galois_LFSR_32_33_hw_fu_785_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        tmp_12_reg_2035 <= grp_fu_814_p1;
        zext_ln48_2_reg_2030[13 : 8] <= zext_ln48_2_fu_1478_p1[13 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        tmp_13_1_reg_2178 <= grp_fu_817_p1;
        tmp_18_reg_2173 <= grp_fu_814_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        tmp_13_2_reg_2183 <= grp_fu_814_p1;
        tmp_13_3_reg_2188 <= grp_fu_817_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        tmp_21_reg_2233 <= grp_fu_880_p6;
        tmp_24_reg_2238 <= grp_fu_893_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        tmp_25_reg_2163 <= grp_fu_867_p6;
        tmp_27_reg_2168 <= grp_fu_854_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        tmp_26_reg_2283 <= grp_fu_880_p6;
        tmp_28_reg_2288 <= grp_fu_893_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_3_reg_1863 <= grp_fu_827_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state135)) begin
        tmp_5_reg_2303 <= grp_fu_838_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_6_reg_1853 <= grp_fu_848_p1;
        tmp_9_reg_1858 <= grp_fu_851_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_7_reg_1868 <= grp_fu_827_p2;
        tmp_s_reg_1873 <= grp_fu_833_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        tmp_V_1_reg_1884 <= tmp_V_1_fu_1023_p1;
        tmp_V_reg_1878 <= {{p_Val2_s_fu_1009_p1[62:52]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln17_fu_954_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln18_1_reg_1816 <= {{i_0_reg_694[8:6]}};
        trunc_ln18_reg_1820 <= trunc_ln18_fu_981_p1;
        zext_ln18_reg_1806[8 : 0] <= zext_ln18_fu_966_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_1482_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state62))) begin
        trunc_ln51_reg_2044 <= trunc_ln51_fu_1488_p1;
    end
end

always @ (*) begin
    if ((icmp_ln17_fu_954_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln64_fu_1729_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state141 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state141 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state143) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln64_reg_2349 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_i4_0_phi_fu_777_p4 = i_1_reg_2353;
    end else begin
        ap_phi_mux_i4_0_phi_fu_777_p4 = i4_0_reg_773;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state143)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        coef_list_0_address0 = zext_ln51_8_fu_1614_p1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        coef_list_0_address0 = zext_ln51_2_fu_1575_p1;
    end else begin
        coef_list_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        coef_list_0_address1 = zext_ln51_9_fu_1634_p1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        coef_list_0_address1 = zext_ln51_6_fu_1594_p1;
    end else begin
        coef_list_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state73))) begin
        coef_list_0_ce0 = 1'b1;
    end else begin
        coef_list_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state73))) begin
        coef_list_0_ce1 = 1'b1;
    end else begin
        coef_list_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        coef_list_1_address0 = zext_ln51_8_fu_1614_p1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        coef_list_1_address0 = zext_ln51_2_fu_1575_p1;
    end else begin
        coef_list_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        coef_list_1_address1 = zext_ln51_9_fu_1634_p1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        coef_list_1_address1 = zext_ln51_6_fu_1594_p1;
    end else begin
        coef_list_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state73))) begin
        coef_list_1_ce0 = 1'b1;
    end else begin
        coef_list_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state73))) begin
        coef_list_1_ce1 = 1'b1;
    end else begin
        coef_list_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        coef_list_2_address0 = zext_ln51_8_fu_1614_p1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        coef_list_2_address0 = zext_ln51_2_fu_1575_p1;
    end else begin
        coef_list_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        coef_list_2_address1 = zext_ln51_9_fu_1634_p1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        coef_list_2_address1 = zext_ln51_6_fu_1594_p1;
    end else begin
        coef_list_2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state73))) begin
        coef_list_2_ce0 = 1'b1;
    end else begin
        coef_list_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state73))) begin
        coef_list_2_ce1 = 1'b1;
    end else begin
        coef_list_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        coef_list_3_address0 = zext_ln51_8_fu_1614_p1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        coef_list_3_address0 = zext_ln51_2_fu_1575_p1;
    end else begin
        coef_list_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        coef_list_3_address1 = zext_ln51_9_fu_1634_p1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        coef_list_3_address1 = zext_ln51_6_fu_1594_p1;
    end else begin
        coef_list_3_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state73))) begin
        coef_list_3_ce0 = 1'b1;
    end else begin
        coef_list_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state73))) begin
        coef_list_3_ce1 = 1'b1;
    end else begin
        coef_list_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        current_val_0_address0 = zext_ln51_7_fu_1561_p1;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        current_val_0_address0 = zext_ln51_1_fu_1492_p1;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        current_val_0_address0 = zext_ln48_fu_1446_p1;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        current_val_0_address0 = zext_ln37_1_fu_1174_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_val_0_address0 = zext_ln18_1_fu_985_p1;
    end else begin
        current_val_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        current_val_0_address1 = zext_ln66_1_fu_1745_p1;
    end else if ((1'b1 == ap_CS_fsm_state140)) begin
        current_val_0_address1 = current_val_0_addr_1_reg_1931;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        current_val_0_address1 = zext_ln51_5_fu_1548_p1;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        current_val_0_address1 = zext_ln51_3_fu_1506_p1;
    end else begin
        current_val_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state51) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        current_val_0_ce0 = 1'b1;
    end else begin
        current_val_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        current_val_0_ce1 = 1'b1;
    end else begin
        current_val_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln18_1_reg_1816 == 3'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_val_0_we0 = 1'b1;
    end else begin
        current_val_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln58_1_reg_2340) & (trunc_ln37_1_reg_1926 == 26'd0) & (1'b1 == ap_CS_fsm_state140))) begin
        current_val_0_we1 = 1'b1;
    end else begin
        current_val_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        current_val_1_address0 = zext_ln51_7_fu_1561_p1;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        current_val_1_address0 = zext_ln51_1_fu_1492_p1;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        current_val_1_address0 = zext_ln48_fu_1446_p1;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        current_val_1_address0 = zext_ln37_1_fu_1174_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_val_1_address0 = zext_ln18_1_fu_985_p1;
    end else begin
        current_val_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        current_val_1_address1 = zext_ln66_1_fu_1745_p1;
    end else if ((1'b1 == ap_CS_fsm_state140)) begin
        current_val_1_address1 = current_val_1_addr_1_reg_1937;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        current_val_1_address1 = zext_ln51_5_fu_1548_p1;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        current_val_1_address1 = zext_ln51_3_fu_1506_p1;
    end else begin
        current_val_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state51) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        current_val_1_ce0 = 1'b1;
    end else begin
        current_val_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        current_val_1_ce1 = 1'b1;
    end else begin
        current_val_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln18_1_reg_1816 == 3'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_val_1_we0 = 1'b1;
    end else begin
        current_val_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln58_1_reg_2340) & (trunc_ln37_1_reg_1926 == 26'd1) & (1'b1 == ap_CS_fsm_state140))) begin
        current_val_1_we1 = 1'b1;
    end else begin
        current_val_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        current_val_2_address0 = zext_ln51_7_fu_1561_p1;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        current_val_2_address0 = zext_ln51_1_fu_1492_p1;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        current_val_2_address0 = zext_ln48_fu_1446_p1;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        current_val_2_address0 = zext_ln37_1_fu_1174_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_val_2_address0 = zext_ln18_1_fu_985_p1;
    end else begin
        current_val_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        current_val_2_address1 = zext_ln66_1_fu_1745_p1;
    end else if ((1'b1 == ap_CS_fsm_state140)) begin
        current_val_2_address1 = current_val_2_addr_1_reg_1943;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        current_val_2_address1 = zext_ln51_5_fu_1548_p1;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        current_val_2_address1 = zext_ln51_3_fu_1506_p1;
    end else begin
        current_val_2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state51) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        current_val_2_ce0 = 1'b1;
    end else begin
        current_val_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        current_val_2_ce1 = 1'b1;
    end else begin
        current_val_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln18_1_reg_1816 == 3'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_val_2_we0 = 1'b1;
    end else begin
        current_val_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln58_1_reg_2340) & (trunc_ln37_1_reg_1926 == 26'd2) & (1'b1 == ap_CS_fsm_state140))) begin
        current_val_2_we1 = 1'b1;
    end else begin
        current_val_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        current_val_3_address0 = zext_ln51_7_fu_1561_p1;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        current_val_3_address0 = zext_ln51_1_fu_1492_p1;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        current_val_3_address0 = zext_ln48_fu_1446_p1;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        current_val_3_address0 = zext_ln37_1_fu_1174_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_val_3_address0 = zext_ln18_1_fu_985_p1;
    end else begin
        current_val_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        current_val_3_address1 = zext_ln66_1_fu_1745_p1;
    end else if ((1'b1 == ap_CS_fsm_state140)) begin
        current_val_3_address1 = current_val_3_addr_1_reg_1949;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        current_val_3_address1 = zext_ln51_5_fu_1548_p1;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        current_val_3_address1 = zext_ln51_3_fu_1506_p1;
    end else begin
        current_val_3_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state51) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        current_val_3_ce0 = 1'b1;
    end else begin
        current_val_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        current_val_3_ce1 = 1'b1;
    end else begin
        current_val_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln18_1_reg_1816 == 3'd0) & ~(trunc_ln18_1_reg_1816 == 3'd1) & ~(trunc_ln18_1_reg_1816 == 3'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_val_3_we0 = 1'b1;
    end else begin
        current_val_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln37_1_reg_1926 == 26'd0) & ~(trunc_ln37_1_reg_1926 == 26'd1) & ~(trunc_ln37_1_reg_1926 == 26'd2) & (1'd1 == and_ln58_1_reg_2340) & (1'b1 == ap_CS_fsm_state140))) begin
        current_val_3_we1 = 1'b1;
    end else begin
        current_val_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        final_val_ce0 = 1'b1;
    end else begin
        final_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln64_reg_2349 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        final_val_we0 = 1'b1;
    end else begin
        final_val_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_Galois_LFSR_32_33_hw_fu_785_ap_start = 1'b1;
    end else begin
        grp_Galois_LFSR_32_33_hw_fu_785_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        grp_Galois_LFSR_32_33_hw_fu_785_input_r = rnd_out_2_reg_1847;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_Galois_LFSR_32_33_hw_fu_785_input_r = rnd_out_1_reg_1841;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_Galois_LFSR_32_33_hw_fu_785_input_r = reg_906;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_Galois_LFSR_32_33_hw_fu_785_input_r = rnd_input_0_reg_705;
    end else begin
        grp_Galois_LFSR_32_33_hw_fu_785_input_r = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state83))) begin
        grp_fu_796_p0 = reg_943;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_796_p0 = cost_new2_1_0_reg_749;
    end else begin
        grp_fu_796_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        grp_fu_796_p1 = reg_937;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        grp_fu_796_p1 = reg_931;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        grp_fu_796_p1 = reg_925;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_796_p1 = reg_919;
    end else begin
        grp_fu_796_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        grp_fu_801_p0 = reg_931;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_801_p0 = reg_919;
    end else if (((1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70))) begin
        grp_fu_801_p0 = tmp_12_reg_2035;
    end else begin
        grp_fu_801_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        grp_fu_801_p1 = tmp_26_reg_2283;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_801_p1 = tmp_21_reg_2233;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        grp_fu_801_p1 = tmp_13_2_reg_2183;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        grp_fu_801_p1 = tmp_18_reg_2173;
    end else begin
        grp_fu_801_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        grp_fu_805_p0 = reg_937;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_805_p0 = reg_925;
    end else if (((1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70))) begin
        grp_fu_805_p0 = tmp_12_reg_2035;
    end else begin
        grp_fu_805_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        grp_fu_805_p1 = tmp_28_reg_2288;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_805_p1 = tmp_24_reg_2238;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        grp_fu_805_p1 = tmp_13_3_reg_2188;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        grp_fu_805_p1 = tmp_13_1_reg_2178;
    end else begin
        grp_fu_805_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_fu_814_p0 = tmp_25_reg_2163;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        grp_fu_814_p0 = tmp_19_reg_2101;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        grp_fu_814_p0 = current_val_cash_reg_2025;
    end else begin
        grp_fu_814_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_fu_817_p0 = tmp_27_reg_2168;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        grp_fu_817_p0 = tmp_23_reg_2113;
    end else begin
        grp_fu_817_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_827_p0 = tmp_6_reg_1853;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_827_p0 = reg_913;
    end else begin
        grp_fu_827_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_827_p1 = 64'd4617315517961601024;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_827_p1 = 64'd4643211215818981376;
    end else begin
        grp_fu_827_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        grp_fu_838_p0 = reg_913;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_838_p0 = tmp_7_reg_1868;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_838_p0 = tmp_3_reg_1863;
    end else begin
        grp_fu_838_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_848_p0 = rnd_out_1_reg_1841;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state99))) begin
        grp_fu_848_p0 = reg_906;
    end else begin
        grp_fu_848_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        grp_fu_854_p5 = zext_ln51_4_reg_2095;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_854_p5 = zext_ln51_4_fu_1533_p1;
    end else begin
        grp_fu_854_p5 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        grp_fu_867_p5 = zext_ln51_4_reg_2095;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_867_p5 = zext_ln51_4_fu_1533_p1;
    end else begin
        grp_fu_867_p5 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        init_val_ce0 = 1'b1;
    end else begin
        init_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state139)) begin
        new_val_address0 = new_val_addr_3_gep_fu_642_p3;
    end else if (((icmp_ln36_reg_1961 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
        new_val_address0 = new_val_addr_1_gep_fu_315_p3;
    end else if (((icmp_ln36_reg_1961 == 1'd0) & (1'b1 == ap_CS_fsm_state53))) begin
        new_val_address0 = zext_ln37_reg_1965;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        new_val_address0 = zext_ln18_reg_1806;
    end else begin
        new_val_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state139) | ((icmp_ln36_reg_1961 == 1'd1) & (1'b1 == ap_CS_fsm_state53)) | ((icmp_ln36_reg_1961 == 1'd0) & (1'b1 == ap_CS_fsm_state53)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        new_val_ce0 = 1'b1;
    end else begin
        new_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_reg_1961 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
        new_val_d0 = add_ln37_fu_1415_p2;
    end else if (((icmp_ln36_reg_1961 == 1'd0) & (1'b1 == ap_CS_fsm_state53))) begin
        new_val_d0 = sub_ln40_fu_1410_p2;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        new_val_d0 = init_val_q0;
    end else begin
        new_val_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln36_reg_1961 == 1'd1) & (1'b1 == ap_CS_fsm_state53)) | ((icmp_ln36_reg_1961 == 1'd0) & (1'b1 == ap_CS_fsm_state53)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln17_reg_1797 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        new_val_we0 = 1'b1;
    end else begin
        new_val_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln17_fu_954_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln17_fu_954_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln22_fu_997_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            if (((icmp_ln47_fu_1420_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state54))) begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            if (((icmp_ln50_fu_1482_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state62))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln64_fu_1729_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln64_fu_1729_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state143;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln37_fu_1415_p2 = (tmp_8_reg_1972 + val_V_1_reg_1955);

assign add_ln502_1_fu_1198_p2 = ($signed(12'd3073) + $signed(zext_ln502_1_fu_1195_p1));

assign add_ln502_2_fu_1299_p2 = ($signed(12'd3073) + $signed(zext_ln502_2_fu_1296_p1));

assign add_ln502_fu_1030_p2 = ($signed(12'd3073) + $signed(zext_ln502_fu_1027_p1));

assign add_ln50_fu_1569_p2 = (9'd4 + j_0_0_reg_761);

assign add_ln51_fu_1518_p2 = (zext_ln48_2_reg_2030 + zext_ln51_fu_1514_p1);

assign and_ln58_1_fu_1718_p2 = (grp_fu_823_p2 & and_ln58_fu_1712_p2);

assign and_ln58_fu_1712_p2 = (or_ln58_fu_1704_p2 & or_ln58_1_fu_1708_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd139];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd120];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state135 = ap_CS_fsm[32'd133];

assign ap_CS_fsm_state136 = ap_CS_fsm[32'd134];

assign ap_CS_fsm_state137 = ap_CS_fsm[32'd135];

assign ap_CS_fsm_state138 = ap_CS_fsm[32'd136];

assign ap_CS_fsm_state139 = ap_CS_fsm[32'd137];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state140 = ap_CS_fsm[32'd138];

assign ap_CS_fsm_state143 = ap_CS_fsm[32'd140];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd97];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state141_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state142_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign bitcast_ln58_1_fu_1663_p1 = tmp_10_reg_2314;

assign bitcast_ln58_fu_1646_p1 = random_reg_2308;

assign current_val_cash_fu_1457_p5 = lshr_ln1_reg_1986;

assign empty_42_fu_1539_p1 = j_0_0_reg_761[7:0];

assign final_val_address0 = zext_ln66_fu_1753_p1;

assign final_val_d0 = tmp_13_fu_1772_p6;

assign i_1_fu_1735_p2 = (ap_phi_mux_i4_0_phi_fu_777_p4 + 9'd1);

assign i_2_fu_1426_p2 = (i3_0_reg_738 + 9'd1);

assign i_3_fu_1003_p2 = (i1_0_reg_715 + 17'd1);

assign i_fu_960_p2 = (i_0_reg_694 + 9'd1);

assign icmp_ln17_fu_954_p2 = ((i_0_reg_694 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_997_p2 = ((i1_0_reg_715 == 17'd100000) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_1384_p2 = ((val_V_2_fu_1376_p3 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_1420_p2 = ((i3_0_reg_738 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_1482_p2 = ((j_0_0_reg_761 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln58_1_fu_1686_p2 = ((trunc_ln58_fu_1659_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln58_2_fu_1692_p2 = ((tmp_15_fu_1666_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln58_3_fu_1698_p2 = ((trunc_ln58_1_fu_1676_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_1680_p2 = ((tmp_14_fu_1649_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_1729_p2 = ((ap_phi_mux_i4_0_phi_fu_777_p4 == 9'd256) ? 1'b1 : 1'b0);

assign init_val_address0 = zext_ln18_fu_966_p1;

assign isNeg_1_fu_1204_p3 = add_ln502_1_fu_1198_p2[32'd11];

assign isNeg_2_fu_1305_p3 = add_ln502_2_fu_1299_p2[32'd11];

assign isNeg_fu_1036_p3 = add_ln502_fu_1030_p2[32'd11];

assign lshr_ln2_fu_1523_p4 = {{j_0_0_reg_761[8:6]}};

assign lshr_ln_fu_1758_p4 = {{i4_0_reg_773[8:6]}};

assign mantissa_V_1_fu_1182_p4 = {{{{1'd1}, {tmp_V_3_reg_1910}}}, {1'd0}};

assign mantissa_V_2_fu_1283_p4 = {{{{1'd1}, {tmp_V_5_reg_1921}}}, {1'd0}};

assign mantissa_V_fu_1061_p4 = {{{{1'd1}, {tmp_V_1_reg_1884}}}, {1'd0}};

assign new_val_addr_1_gep_fu_315_p3 = zext_ln37_reg_1965;

assign new_val_addr_3_gep_fu_642_p3 = zext_ln37_reg_1965;

assign or_ln50_1_fu_1602_p2 = (empty_42_reg_2106 | 8'd2);

assign or_ln50_2_fu_1622_p2 = (empty_42_reg_2106 | 8'd3);

assign or_ln50_fu_1582_p2 = (empty_42_reg_2106 | 8'd1);

assign or_ln51_1_fu_1543_p2 = (trunc_ln51_reg_2044 | 6'd2);

assign or_ln51_2_fu_1556_p2 = (trunc_ln51_reg_2044 | 6'd3);

assign or_ln51_fu_1500_p2 = (trunc_ln51_fu_1488_p1 | 6'd1);

assign or_ln58_1_fu_1708_p2 = (icmp_ln58_3_reg_2335 | icmp_ln58_2_reg_2330);

assign or_ln58_fu_1704_p2 = (icmp_ln58_reg_2320 | icmp_ln58_1_reg_2325);

assign p_Val2_5_fu_1118_p1 = grp_fu_838_p2;

assign p_Val2_9_fu_1136_p1 = grp_fu_843_p2;

assign p_Val2_s_fu_1009_p1 = grp_fu_838_p2;

assign r_V_1_fu_1095_p2 = zext_ln682_fu_1070_p1 << zext_ln1287_fu_1077_p1;

assign r_V_3_fu_1241_p2 = mantissa_V_1_fu_1182_p4 >> zext_ln1285_1_fu_1237_p1;

assign r_V_4_fu_1247_p2 = zext_ln682_1_fu_1191_p1 << zext_ln1287_1_fu_1233_p1;

assign r_V_5_fu_1342_p2 = mantissa_V_2_fu_1283_p4 >> zext_ln1285_2_fu_1338_p1;

assign r_V_6_fu_1348_p2 = zext_ln682_2_fu_1292_p1 << zext_ln1287_2_fu_1334_p1;

assign r_V_7_fu_1101_p3 = ((isNeg_reg_1889[0:0] === 1'b1) ? zext_ln1287_3_fu_1091_p1 : r_V_1_fu_1095_p2);

assign r_V_fu_1085_p2 = mantissa_V_fu_1061_p4 >> zext_ln1285_fu_1081_p1;

assign rnd_input_fu_948_p2 = seed << 32'd14;

assign sext_ln1311_1_fu_1074_p1 = $signed(ush_reg_1894);

assign sext_ln1311_2_fu_1217_p1 = $signed(sub_ln1311_1_fu_1212_p2);

assign sext_ln1311_3_fu_1229_p1 = $signed(ush_1_fu_1221_p3);

assign sext_ln1311_4_fu_1318_p1 = $signed(sub_ln1311_2_fu_1313_p2);

assign sext_ln1311_5_fu_1330_p1 = $signed(ush_2_fu_1322_p3);

assign sext_ln1311_fu_1049_p1 = $signed(sub_ln1311_fu_1044_p2);

assign sub_ln1311_1_fu_1212_p2 = (11'd1023 - tmp_V_2_reg_1904);

assign sub_ln1311_2_fu_1313_p2 = (11'd1023 - tmp_V_4_reg_1915);

assign sub_ln1311_fu_1044_p2 = (11'd1023 - tmp_V_reg_1878);

assign sub_ln40_fu_1410_p2 = (tmp_8_reg_1972 - val_V_1_reg_1955);

assign tmp_13_fu_1772_p5 = lshr_ln_fu_1758_p4;

assign tmp_14_fu_1649_p4 = {{bitcast_ln58_fu_1646_p1[30:23]}};

assign tmp_15_fu_1666_p4 = {{bitcast_ln58_1_fu_1663_p1[30:23]}};

assign tmp_29_fu_1265_p4 = {{r_V_4_fu_1247_p2[84:53]}};

assign tmp_30_fu_1366_p4 = {{r_V_6_fu_1348_p2[84:53]}};

assign tmp_31_fu_1471_p3 = {{trunc_ln48_reg_1991}, {8'd0}};

assign tmp_32_fu_1253_p3 = r_V_3_fu_1241_p2[32'd53];

assign tmp_33_fu_1587_p3 = {{trunc_ln48_reg_1991}, {or_ln50_fu_1582_p2}};

assign tmp_34_fu_1607_p3 = {{trunc_ln48_reg_1991}, {or_ln50_1_fu_1602_p2}};

assign tmp_35_fu_1627_p3 = {{trunc_ln48_reg_1991}, {or_ln50_2_fu_1622_p2}};

assign tmp_39_fu_1354_p3 = r_V_5_fu_1342_p2[32'd53];

assign tmp_8_fu_1396_p5 = trunc_ln37_1_reg_1926;

assign tmp_V_1_fu_1023_p1 = p_Val2_s_fu_1009_p1[51:0];

assign tmp_V_3_fu_1132_p1 = p_Val2_5_fu_1118_p1[51:0];

assign tmp_V_5_fu_1150_p1 = p_Val2_9_fu_1136_p1[51:0];

assign trunc_ln18_fu_981_p1 = i_0_reg_694[5:0];

assign trunc_ln1_fu_1164_p4 = {{r_V_7_fu_1101_p3[58:53]}};

assign trunc_ln48_fu_1442_p1 = i3_0_reg_738[5:0];

assign trunc_ln51_fu_1488_p1 = j_0_0_reg_761[5:0];

assign trunc_ln58_1_fu_1676_p1 = bitcast_ln58_1_fu_1663_p1[22:0];

assign trunc_ln58_fu_1659_p1 = bitcast_ln58_fu_1646_p1[22:0];

assign trunc_ln66_fu_1741_p1 = ap_phi_mux_i4_0_phi_fu_777_p4[5:0];

assign ush_1_fu_1221_p3 = ((isNeg_1_fu_1204_p3[0:0] === 1'b1) ? sext_ln1311_2_fu_1217_p1 : add_ln502_1_fu_1198_p2);

assign ush_2_fu_1322_p3 = ((isNeg_2_fu_1305_p3[0:0] === 1'b1) ? sext_ln1311_4_fu_1318_p1 : add_ln502_2_fu_1299_p2);

assign ush_fu_1053_p3 = ((isNeg_fu_1036_p3[0:0] === 1'b1) ? sext_ln1311_fu_1049_p1 : add_ln502_fu_1030_p2);

assign val_V_1_fu_1275_p3 = ((isNeg_1_fu_1204_p3[0:0] === 1'b1) ? zext_ln662_fu_1261_p1 : tmp_29_fu_1265_p4);

assign val_V_2_fu_1376_p3 = ((isNeg_2_fu_1305_p3[0:0] === 1'b1) ? zext_ln662_1_fu_1362_p1 : tmp_30_fu_1366_p4);

assign zext_ln1285_1_fu_1237_p1 = $unsigned(sext_ln1311_3_fu_1229_p1);

assign zext_ln1285_2_fu_1338_p1 = $unsigned(sext_ln1311_5_fu_1330_p1);

assign zext_ln1285_fu_1081_p1 = $unsigned(sext_ln1311_1_fu_1074_p1);

assign zext_ln1287_1_fu_1233_p1 = $unsigned(sext_ln1311_3_fu_1229_p1);

assign zext_ln1287_2_fu_1334_p1 = $unsigned(sext_ln1311_5_fu_1330_p1);

assign zext_ln1287_3_fu_1091_p1 = r_V_fu_1085_p2;

assign zext_ln1287_fu_1077_p1 = $unsigned(sext_ln1311_1_fu_1074_p1);

assign zext_ln18_1_fu_985_p1 = trunc_ln18_reg_1820;

assign zext_ln18_fu_966_p1 = i_0_reg_694;

assign zext_ln37_1_fu_1174_p1 = trunc_ln1_fu_1164_p4;

assign zext_ln37_fu_1390_p1 = val_V_reg_1899;

assign zext_ln48_1_fu_1454_p1 = lshr_ln1_reg_1986;

assign zext_ln48_2_fu_1478_p1 = tmp_31_fu_1471_p3;

assign zext_ln48_fu_1446_p1 = trunc_ln48_fu_1442_p1;

assign zext_ln502_1_fu_1195_p1 = tmp_V_2_reg_1904;

assign zext_ln502_2_fu_1296_p1 = tmp_V_4_reg_1915;

assign zext_ln502_fu_1027_p1 = tmp_V_reg_1878;

assign zext_ln51_1_fu_1492_p1 = trunc_ln51_fu_1488_p1;

assign zext_ln51_2_fu_1575_p1 = add_ln51_reg_2090;

assign zext_ln51_3_fu_1506_p1 = or_ln51_fu_1500_p2;

assign zext_ln51_4_fu_1533_p1 = lshr_ln2_fu_1523_p4;

assign zext_ln51_5_fu_1548_p1 = or_ln51_1_fu_1543_p2;

assign zext_ln51_6_fu_1594_p1 = tmp_33_fu_1587_p3;

assign zext_ln51_7_fu_1561_p1 = or_ln51_2_fu_1556_p2;

assign zext_ln51_8_fu_1614_p1 = tmp_34_fu_1607_p3;

assign zext_ln51_9_fu_1634_p1 = tmp_35_fu_1627_p3;

assign zext_ln51_fu_1514_p1 = j_0_0_reg_761;

assign zext_ln662_1_fu_1362_p1 = tmp_39_fu_1354_p3;

assign zext_ln662_fu_1261_p1 = tmp_32_fu_1253_p3;

assign zext_ln66_1_fu_1745_p1 = trunc_ln66_fu_1741_p1;

assign zext_ln66_fu_1753_p1 = i4_0_reg_773;

assign zext_ln682_1_fu_1191_p1 = mantissa_V_1_fu_1182_p4;

assign zext_ln682_2_fu_1292_p1 = mantissa_V_2_fu_1283_p4;

assign zext_ln682_fu_1070_p1 = mantissa_V_fu_1061_p4;

always @ (posedge ap_clk) begin
    rnd_input_reg_1792[13:0] <= 14'b00000000000000;
    zext_ln18_reg_1806[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln37_reg_1965[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln48_1_reg_2019[31:3] <= 29'b00000000000000000000000000000;
    zext_ln48_2_reg_2030[7:0] <= 8'b00000000;
    zext_ln48_2_reg_2030[14] <= 1'b0;
    zext_ln51_4_reg_2095[31:3] <= 29'b00000000000000000000000000000;
end

endmodule //QIO_accel_hw_int_s
