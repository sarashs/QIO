// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Galois_LFSR_32_33_hw_HH_
#define _Galois_LFSR_32_33_hw_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Galois_LFSR_32_33_hw : public sc_module {
    // Port declarations 9
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > input_r;
    sc_in< sc_lv<32> > seed_V;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    Galois_LFSR_32_33_hw(sc_module_name name);
    SC_HAS_PROCESS(Galois_LFSR_32_33_hw);

    ~Galois_LFSR_32_33_hw();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > guard_variable_for_v;
    sc_signal< sc_lv<33> > lfsr33_V;
    sc_signal< sc_lv<33> > rhs_V_fu_112_p3;
    sc_signal< sc_lv<33> > seed_V_cast_fu_36_p1;
    sc_signal< sc_lv<33> > select_ln12_fu_48_p3;
    sc_signal< sc_lv<31> > lfsr32_V_fu_64_p4;
    sc_signal< sc_lv<32> > lfsr32_V_1_fu_74_p1;
    sc_signal< sc_lv<1> > lsb32_V_fu_56_p1;
    sc_signal< sc_lv<32> > lfsr32_V_2_fu_78_p2;
    sc_signal< sc_lv<32> > lshr_ln_fu_92_p4;
    sc_signal< sc_lv<33> > zext_ln858_fu_102_p1;
    sc_signal< sc_lv<1> > lsb33_V_fu_60_p1;
    sc_signal< sc_lv<33> > xor_ln719_fu_106_p2;
    sc_signal< sc_lv<32> > trunc_ln1357_fu_120_p1;
    sc_signal< sc_lv<32> > lfsr32_V_3_fu_84_p3;
    sc_signal< sc_lv<32> > xor_ln23_fu_124_p2;
    sc_signal< sc_lv<32> > ap_return_preg;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_A3000000;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<33> ap_const_lv33_194000000;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_lfsr32_V_1_fu_74_p1();
    void thread_lfsr32_V_2_fu_78_p2();
    void thread_lfsr32_V_3_fu_84_p3();
    void thread_lfsr32_V_fu_64_p4();
    void thread_lsb32_V_fu_56_p1();
    void thread_lsb33_V_fu_60_p1();
    void thread_lshr_ln_fu_92_p4();
    void thread_rhs_V_fu_112_p3();
    void thread_seed_V_cast_fu_36_p1();
    void thread_select_ln12_fu_48_p3();
    void thread_trunc_ln1357_fu_120_p1();
    void thread_xor_ln23_fu_124_p2();
    void thread_xor_ln719_fu_106_p2();
    void thread_zext_ln858_fu_102_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
