// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _QIO_accel_hw_int_s_HH_
#define _QIO_accel_hw_int_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Galois_LFSR_32_33_hw.h"
#include "QIO_accel_hw_int_bkb.h"

namespace ap_rtl {

struct QIO_accel_hw_int_s : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<6> > init_val_address0;
    sc_out< sc_logic > init_val_ce0;
    sc_in< sc_lv<32> > init_val_q0;
    sc_out< sc_lv<6> > final_val_address0;
    sc_out< sc_logic > final_val_ce0;
    sc_out< sc_logic > final_val_we0;
    sc_out< sc_lv<32> > final_val_d0;


    // Module declarations
    QIO_accel_hw_int_s(sc_module_name name);
    SC_HAS_PROCESS(QIO_accel_hw_int_s);

    ~QIO_accel_hw_int_s();

    sc_trace_file* mVcdFile;

    QIO_accel_hw_int_bkb* current_val_U;
    QIO_accel_hw_int_bkb* new_val_U;
    Galois_LFSR_32_33_hw* grp_Galois_LFSR_32_33_hw_fu_156;
    sc_signal< sc_lv<11> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<7> > i_fu_170_p2;
    sc_signal< sc_lv<7> > i_reg_213;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > zext_ln37_fu_176_p1;
    sc_signal< sc_lv<64> > zext_ln37_reg_218;
    sc_signal< sc_lv<1> > icmp_ln36_fu_164_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > new_val_q0;
    sc_signal< sc_lv<32> > new_val_load_reg_239;
    sc_signal< sc_lv<4> > i_1_fu_187_p2;
    sc_signal< sc_lv<4> > i_1_reg_247;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<7> > i_2_fu_199_p2;
    sc_signal< sc_lv<7> > i_2_reg_255;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<64> > zext_ln71_fu_205_p1;
    sc_signal< sc_lv<64> > zext_ln71_reg_260;
    sc_signal< sc_lv<1> > icmp_ln70_fu_193_p2;
    sc_signal< sc_lv<6> > current_val_address0;
    sc_signal< sc_logic > current_val_ce0;
    sc_signal< sc_logic > current_val_we0;
    sc_signal< sc_lv<32> > current_val_d0;
    sc_signal< sc_lv<32> > current_val_q0;
    sc_signal< sc_lv<6> > new_val_address0;
    sc_signal< sc_logic > new_val_ce0;
    sc_signal< sc_logic > new_val_we0;
    sc_signal< sc_logic > grp_Galois_LFSR_32_33_hw_fu_156_ap_start;
    sc_signal< sc_logic > grp_Galois_LFSR_32_33_hw_fu_156_ap_done;
    sc_signal< sc_logic > grp_Galois_LFSR_32_33_hw_fu_156_ap_idle;
    sc_signal< sc_logic > grp_Galois_LFSR_32_33_hw_fu_156_ap_ready;
    sc_signal< sc_lv<7> > i_0_reg_123;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<4> > i1_0_reg_134;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<7> > i2_0_reg_145;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<1> > icmp_ln41_fu_181_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<11> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<11> ap_ST_fsm_state1;
    static const sc_lv<11> ap_ST_fsm_state2;
    static const sc_lv<11> ap_ST_fsm_state3;
    static const sc_lv<11> ap_ST_fsm_state4;
    static const sc_lv<11> ap_ST_fsm_state5;
    static const sc_lv<11> ap_ST_fsm_state6;
    static const sc_lv<11> ap_ST_fsm_state7;
    static const sc_lv<11> ap_ST_fsm_state8;
    static const sc_lv<11> ap_ST_fsm_state9;
    static const sc_lv<11> ap_ST_fsm_state10;
    static const sc_lv<11> ap_ST_fsm_state11;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<7> ap_const_lv7_40;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_current_val_address0();
    void thread_current_val_ce0();
    void thread_current_val_d0();
    void thread_current_val_we0();
    void thread_final_val_address0();
    void thread_final_val_ce0();
    void thread_final_val_d0();
    void thread_final_val_we0();
    void thread_grp_Galois_LFSR_32_33_hw_fu_156_ap_start();
    void thread_i_1_fu_187_p2();
    void thread_i_2_fu_199_p2();
    void thread_i_fu_170_p2();
    void thread_icmp_ln36_fu_164_p2();
    void thread_icmp_ln41_fu_181_p2();
    void thread_icmp_ln70_fu_193_p2();
    void thread_init_val_address0();
    void thread_init_val_ce0();
    void thread_new_val_address0();
    void thread_new_val_ce0();
    void thread_new_val_we0();
    void thread_zext_ln37_fu_176_p1();
    void thread_zext_ln71_fu_205_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
