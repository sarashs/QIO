// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module QIO_int_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        current_val_address0,
        current_val_ce0,
        current_val_q0,
        coef_list_address0,
        coef_list_ce0,
        coef_list_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 27'd1;
parameter    ap_ST_fsm_pp0_stage0 = 27'd2;
parameter    ap_ST_fsm_state4 = 27'd4;
parameter    ap_ST_fsm_state5 = 27'd8;
parameter    ap_ST_fsm_state6 = 27'd16;
parameter    ap_ST_fsm_state7 = 27'd32;
parameter    ap_ST_fsm_state8 = 27'd64;
parameter    ap_ST_fsm_state9 = 27'd128;
parameter    ap_ST_fsm_state10 = 27'd256;
parameter    ap_ST_fsm_state11 = 27'd512;
parameter    ap_ST_fsm_state12 = 27'd1024;
parameter    ap_ST_fsm_state13 = 27'd2048;
parameter    ap_ST_fsm_state14 = 27'd4096;
parameter    ap_ST_fsm_state15 = 27'd8192;
parameter    ap_ST_fsm_state16 = 27'd16384;
parameter    ap_ST_fsm_state17 = 27'd32768;
parameter    ap_ST_fsm_state18 = 27'd65536;
parameter    ap_ST_fsm_state19 = 27'd131072;
parameter    ap_ST_fsm_state20 = 27'd262144;
parameter    ap_ST_fsm_state21 = 27'd524288;
parameter    ap_ST_fsm_state22 = 27'd1048576;
parameter    ap_ST_fsm_pp1_stage0 = 27'd2097152;
parameter    ap_ST_fsm_pp1_stage1 = 27'd4194304;
parameter    ap_ST_fsm_pp1_stage2 = 27'd8388608;
parameter    ap_ST_fsm_pp1_stage3 = 27'd16777216;
parameter    ap_ST_fsm_pp1_stage4 = 27'd33554432;
parameter    ap_ST_fsm_state45 = 27'd67108864;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] current_val_address0;
output   current_val_ce0;
input  [31:0] current_val_q0;
output  [11:0] coef_list_address0;
output   coef_list_ce0;
input  [31:0] coef_list_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] current_val_address0;
reg current_val_ce0;
reg[11:0] coef_list_address0;
reg coef_list_ce0;

(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] i_0_reg_120;
reg   [31:0] j_0_in_reg_143;
reg   [31:0] reg_167;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_state24_pp1_stage1_iter0;
wire    ap_block_state29_pp1_stage1_iter1;
wire    ap_block_state34_pp1_stage1_iter2;
wire    ap_block_state39_pp1_stage1_iter3;
wire    ap_block_state44_pp1_stage1_iter4;
wire    ap_block_pp1_stage1_11001;
reg   [0:0] icmp_ln34_reg_356;
reg   [0:0] icmp_ln34_reg_356_pp1_iter2_reg;
wire   [31:0] grp_fu_156_p2;
reg   [31:0] reg_172;
wire    ap_CS_fsm_state16;
reg   [31:0] grp_load_fu_163_p1;
wire    ap_CS_fsm_state17;
reg    ap_enable_reg_pp1_iter3;
reg   [0:0] icmp_ln34_reg_356_pp1_iter3_reg;
wire   [31:0] grp_fu_152_p2;
reg   [31:0] reg_183;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter4;
wire    ap_block_state23_pp1_stage0_iter0;
wire    ap_block_state28_pp1_stage0_iter1;
wire    ap_block_state33_pp1_stage0_iter2;
wire    ap_block_state38_pp1_stage0_iter3;
wire    ap_block_state43_pp1_stage0_iter4;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln26_fu_192_p2;
reg   [0:0] icmp_ln26_reg_292;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [6:0] i_fu_198_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] zext_ln28_fu_204_p1;
reg   [63:0] zext_ln28_reg_301;
wire   [6:0] i_6_fu_220_p2;
reg   [6:0] i_6_reg_321;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln31_fu_214_p2;
reg   [31:0] current_val_load_2_reg_331;
wire    ap_CS_fsm_state6;
wire   [13:0] zext_ln32_2_fu_243_p1;
reg   [13:0] zext_ln32_2_reg_336;
wire    ap_CS_fsm_state11;
wire   [31:0] grp_fu_160_p1;
reg   [31:0] tmp_reg_346;
wire   [31:0] zext_ln31_fu_258_p1;
wire    ap_CS_fsm_state22;
wire   [0:0] icmp_ln34_fu_262_p2;
reg   [0:0] icmp_ln34_reg_356_pp1_iter1_reg;
reg   [0:0] icmp_ln34_reg_356_pp1_iter4_reg;
wire  signed [31:0] j_fu_268_p2;
reg  signed [31:0] j_reg_360;
reg    ap_enable_reg_pp1_iter0;
wire   [13:0] add_ln36_fu_283_p2;
reg   [13:0] add_ln36_reg_365;
reg   [13:0] add_ln36_reg_365_pp1_iter1_reg;
wire   [31:0] current_val2_q0;
reg   [31:0] current_val2_load_reg_375;
reg   [31:0] tmp_2_reg_380;
wire    ap_CS_fsm_pp1_stage2;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_state25_pp1_stage2_iter0;
wire    ap_block_state30_pp1_stage2_iter1;
wire    ap_block_state35_pp1_stage2_iter2;
wire    ap_block_state40_pp1_stage2_iter3;
wire    ap_block_pp1_stage2_11001;
reg   [31:0] tmp_4_reg_390;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state23;
wire    ap_block_state27_pp1_stage4_iter0;
wire    ap_block_state32_pp1_stage4_iter1;
wire    ap_block_state37_pp1_stage4_iter2;
wire    ap_block_state42_pp1_stage4_iter3;
wire    ap_block_pp1_stage4_subdone;
wire    ap_CS_fsm_pp1_stage4;
wire    ap_block_pp1_stage1_subdone;
reg   [5:0] current_val2_address0;
reg    current_val2_ce0;
reg    current_val2_we0;
reg   [6:0] i1_0_reg_131;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state4;
reg   [31:0] ap_phi_mux_j_0_in_phi_fu_146_p4;
wire    ap_block_pp1_stage0;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln32_fu_226_p1;
wire   [63:0] zext_ln32_3_fu_253_p1;
wire  signed [63:0] sext_ln36_fu_274_p1;
wire  signed [63:0] sext_ln36_1_fu_288_p1;
reg   [31:0] cost_new_write_assig_fu_54;
reg   [31:0] ap_sig_allocacmp_cost_new_write_assig_2;
wire    ap_block_pp1_stage1;
reg   [31:0] grp_fu_152_p1;
reg   [31:0] grp_fu_156_p0;
reg   [31:0] grp_fu_156_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_pp1_stage3;
wire    ap_block_pp1_stage2;
reg   [31:0] grp_fu_160_p0;
wire    ap_CS_fsm_state7;
wire   [12:0] tmp_1_fu_235_p3;
wire   [13:0] zext_ln32_1_fu_231_p1;
wire   [13:0] add_ln32_fu_247_p2;
wire   [13:0] trunc_ln36_fu_279_p1;
reg   [26:0] ap_NS_fsm;
wire    ap_block_pp1_stage2_subdone;
wire    ap_block_state26_pp1_stage3_iter0;
wire    ap_block_state31_pp1_stage3_iter1;
wire    ap_block_state36_pp1_stage3_iter2;
wire    ap_block_state41_pp1_stage3_iter3;
wire    ap_block_pp1_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'd1;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

QIO_int_s_currentbkb #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
current_val2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(current_val2_address0),
    .ce0(current_val2_ce0),
    .we0(current_val2_we0),
    .d0(current_val_q0),
    .q0(current_val2_q0)
);

QIO_accel_fadd_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
QIO_accel_fadd_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_load_fu_163_p1),
    .din1(grp_fu_152_p1),
    .ce(1'b1),
    .dout(grp_fu_152_p2)
);

QIO_accel_fmul_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
QIO_accel_fmul_32dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_156_p0),
    .din1(grp_fu_156_p1),
    .ce(1'b1),
    .dout(grp_fu_156_p2)
);

QIO_accel_sitofp_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
QIO_accel_sitofp_eOg_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_160_p0),
    .ce(1'b1),
    .dout(grp_fu_160_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state23) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4)))) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((icmp_ln34_reg_356_pp1_iter4_reg == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        cost_new_write_assig_fu_54 <= reg_183;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        cost_new_write_assig_fu_54 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i1_0_reg_131 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        i1_0_reg_131 <= i_6_reg_321;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_192_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_120 <= i_fu_198_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_120 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_reg_356 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        j_0_in_reg_143 <= j_reg_360;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        j_0_in_reg_143 <= zext_ln31_fu_258_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_262_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln36_reg_365 <= add_ln36_fu_283_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln36_reg_365_pp1_iter1_reg <= add_ln36_reg_365;
        icmp_ln34_reg_356 <= icmp_ln34_fu_262_p2;
        icmp_ln34_reg_356_pp1_iter1_reg <= icmp_ln34_reg_356;
        icmp_ln34_reg_356_pp1_iter2_reg <= icmp_ln34_reg_356_pp1_iter1_reg;
        icmp_ln34_reg_356_pp1_iter3_reg <= icmp_ln34_reg_356_pp1_iter2_reg;
        icmp_ln34_reg_356_pp1_iter4_reg <= icmp_ln34_reg_356_pp1_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_reg_356 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        current_val2_load_reg_375 <= current_val2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        current_val_load_2_reg_331 <= current_val_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_6_reg_321 <= i_6_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln26_reg_292 <= icmp_ln26_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_262_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        j_reg_360 <= j_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((icmp_ln34_reg_356_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        reg_167 <= coef_list_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((icmp_ln34_reg_356_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        reg_172 <= grp_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | ((icmp_ln34_reg_356_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        reg_183 <= grp_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_reg_356_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
        tmp_2_reg_380 <= grp_fu_160_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_reg_356_pp1_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_4_reg_390 <= grp_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_reg_346 <= grp_fu_160_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_192_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        zext_ln28_reg_301[6 : 0] <= zext_ln28_fu_204_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        zext_ln32_2_reg_336[12 : 6] <= zext_ln32_2_fu_243_p1[12 : 6];
    end
end

always @ (*) begin
    if ((icmp_ln26_fu_192_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln34_fu_262_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state23 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state23 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln31_fu_214_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_reg_356 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_j_0_in_phi_fu_146_p4 = j_reg_360;
    end else begin
        ap_phi_mux_j_0_in_phi_fu_146_p4 = j_0_in_reg_143;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln31_fu_214_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_reg_356_pp1_iter4_reg == 1'd0) & (1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        ap_sig_allocacmp_cost_new_write_assig_2 = reg_183;
    end else begin
        ap_sig_allocacmp_cost_new_write_assig_2 = cost_new_write_assig_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        coef_list_address0 = sext_ln36_1_fu_288_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        coef_list_address0 = zext_ln32_3_fu_253_p1;
    end else begin
        coef_list_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        coef_list_ce0 = 1'b1;
    end else begin
        coef_list_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        current_val2_address0 = sext_ln36_fu_274_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_val2_address0 = zext_ln28_reg_301;
    end else begin
        current_val2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        current_val2_ce0 = 1'b1;
    end else begin
        current_val2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_reg_292 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        current_val2_we0 = 1'b1;
    end else begin
        current_val2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        current_val_address0 = zext_ln32_fu_226_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_val_address0 = zext_ln28_fu_204_p1;
    end else begin
        current_val_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        current_val_ce0 = 1'b1;
    end else begin
        current_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        grp_fu_152_p1 = tmp_4_reg_390;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_152_p1 = reg_172;
    end else begin
        grp_fu_152_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
        grp_fu_156_p0 = reg_172;
    end else if (((1'b1 == ap_CS_fsm_state13) | ((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter1 == 1'b1)))) begin
        grp_fu_156_p0 = tmp_reg_346;
    end else begin
        grp_fu_156_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        grp_fu_156_p1 = tmp_2_reg_380;
    end else if (((1'b1 == ap_CS_fsm_state13) | ((1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2)))) begin
        grp_fu_156_p1 = reg_167;
    end else begin
        grp_fu_156_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        grp_fu_160_p0 = current_val2_load_reg_375;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_160_p0 = current_val_load_2_reg_331;
    end else begin
        grp_fu_160_p0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln34_reg_356_pp1_iter3_reg == 1'd0) & (1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        grp_load_fu_163_p1 = ap_sig_allocacmp_cost_new_write_assig_2;
    end else if (((1'b1 == ap_CS_fsm_state17) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln31_fu_214_p2 == 1'd1)))) begin
        grp_load_fu_163_p1 = cost_new_write_assig_fu_54;
    end else begin
        grp_load_fu_163_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln26_fu_192_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln26_fu_192_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln31_fu_214_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln34_fu_262_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln34_fu_262_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((~((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter4 == 1'b1) & (ap_enable_reg_pp1_iter3 == 1'b0)) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter4 == 1'b1) & (ap_enable_reg_pp1_iter3 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln32_fu_247_p2 = (zext_ln32_1_fu_231_p1 + zext_ln32_2_fu_243_p1);

assign add_ln36_fu_283_p2 = (zext_ln32_2_reg_336 + trunc_ln36_fu_279_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp1_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp1_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp1_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp1_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp1_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp1_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp1_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp1_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp1_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp1_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp1_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp1_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_return = grp_load_fu_163_p1;

assign i_6_fu_220_p2 = (i1_0_reg_131 + 7'd1);

assign i_fu_198_p2 = (i_0_reg_120 + 7'd1);

assign icmp_ln26_fu_192_p2 = ((i_0_reg_120 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_214_p2 = ((i1_0_reg_131 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_262_p2 = ((ap_phi_mux_j_0_in_phi_fu_146_p4 == 32'd63) ? 1'b1 : 1'b0);

assign j_fu_268_p2 = (32'd1 + ap_phi_mux_j_0_in_phi_fu_146_p4);

assign sext_ln36_1_fu_288_p1 = $signed(add_ln36_reg_365_pp1_iter1_reg);

assign sext_ln36_fu_274_p1 = j_fu_268_p2;

assign tmp_1_fu_235_p3 = {{i1_0_reg_131}, {6'd0}};

assign trunc_ln36_fu_279_p1 = j_fu_268_p2[13:0];

assign zext_ln28_fu_204_p1 = i_0_reg_120;

assign zext_ln31_fu_258_p1 = i1_0_reg_131;

assign zext_ln32_1_fu_231_p1 = i1_0_reg_131;

assign zext_ln32_2_fu_243_p1 = tmp_1_fu_235_p3;

assign zext_ln32_3_fu_253_p1 = add_ln32_fu_247_p2;

assign zext_ln32_fu_226_p1 = i1_0_reg_131;

always @ (posedge ap_clk) begin
    zext_ln28_reg_301[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln32_2_reg_336[5:0] <= 6'b000000;
    zext_ln32_2_reg_336[13] <= 1'b0;
end

endmodule //QIO_int_s
