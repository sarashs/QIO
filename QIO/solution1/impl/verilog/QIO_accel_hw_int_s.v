// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module QIO_accel_hw_int_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        init_val_address0,
        init_val_ce0,
        init_val_q0,
        final_val_address0,
        final_val_ce0,
        final_val_we0,
        final_val_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] init_val_address0;
output   init_val_ce0;
input  [31:0] init_val_q0;
output  [5:0] final_val_address0;
output   final_val_ce0;
output   final_val_we0;
output  [31:0] final_val_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg init_val_ce0;
reg final_val_ce0;
reg final_val_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] i_fu_170_p2;
reg   [6:0] i_reg_213;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln37_fu_176_p1;
reg   [63:0] zext_ln37_reg_218;
wire   [0:0] icmp_ln36_fu_164_p2;
wire    ap_CS_fsm_state4;
wire   [31:0] new_val_q0;
reg   [31:0] new_val_load_reg_239;
wire   [3:0] i_1_fu_187_p2;
reg   [3:0] i_1_reg_247;
wire    ap_CS_fsm_state5;
wire   [6:0] i_2_fu_199_p2;
reg   [6:0] i_2_reg_255;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln71_fu_205_p1;
reg   [63:0] zext_ln71_reg_260;
wire   [0:0] icmp_ln70_fu_193_p2;
reg   [5:0] current_val_address0;
reg    current_val_ce0;
reg    current_val_we0;
reg   [31:0] current_val_d0;
wire   [31:0] current_val_q0;
reg   [5:0] new_val_address0;
reg    new_val_ce0;
reg    new_val_we0;
reg    grp_Galois_LFSR_32_33_hw_fu_156_ap_start;
wire    grp_Galois_LFSR_32_33_hw_fu_156_ap_done;
wire    grp_Galois_LFSR_32_33_hw_fu_156_ap_idle;
wire    grp_Galois_LFSR_32_33_hw_fu_156_ap_ready;
reg   [6:0] i_0_reg_123;
wire    ap_CS_fsm_state3;
reg   [3:0] i1_0_reg_134;
wire    ap_CS_fsm_state9;
reg   [6:0] i2_0_reg_145;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln41_fu_181_p2;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

QIO_accel_hw_int_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
current_val_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(current_val_address0),
    .ce0(current_val_ce0),
    .we0(current_val_we0),
    .d0(current_val_d0),
    .q0(current_val_q0)
);

QIO_accel_hw_int_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
new_val_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(new_val_address0),
    .ce0(new_val_ce0),
    .we0(new_val_we0),
    .d0(init_val_q0),
    .q0(new_val_q0)
);

Galois_LFSR_32_33_hw grp_Galois_LFSR_32_33_hw_fu_156(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Galois_LFSR_32_33_hw_fu_156_ap_start),
    .ap_done(grp_Galois_LFSR_32_33_hw_fu_156_ap_done),
    .ap_idle(grp_Galois_LFSR_32_33_hw_fu_156_ap_idle),
    .ap_ready(grp_Galois_LFSR_32_33_hw_fu_156_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i1_0_reg_134 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i1_0_reg_134 <= i_1_reg_247;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_fu_181_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i2_0_reg_145 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        i2_0_reg_145 <= i_2_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_123 <= i_reg_213;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_123 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_1_reg_247 <= i_1_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_2_reg_255 <= i_2_fu_199_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_213 <= i_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        new_val_load_reg_239 <= new_val_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_fu_164_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln37_reg_218[6 : 0] <= zext_ln37_fu_176_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_fu_193_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        zext_ln71_reg_260[6 : 0] <= zext_ln71_fu_205_p1[6 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln70_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln70_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        current_val_address0 = zext_ln71_fu_205_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        current_val_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        current_val_address0 = zext_ln37_reg_218;
    end else begin
        current_val_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        current_val_ce0 = 1'b1;
    end else begin
        current_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        current_val_d0 = new_val_load_reg_239;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        current_val_d0 = init_val_q0;
    end else begin
        current_val_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln41_fu_181_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        current_val_we0 = 1'b1;
    end else begin
        current_val_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        final_val_ce0 = 1'b1;
    end else begin
        final_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        final_val_we0 = 1'b1;
    end else begin
        final_val_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_Galois_LFSR_32_33_hw_fu_156_ap_start = 1'b1;
    end else begin
        grp_Galois_LFSR_32_33_hw_fu_156_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        init_val_ce0 = 1'b1;
    end else begin
        init_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        new_val_address0 = zext_ln37_reg_218;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        new_val_address0 = 64'd0;
    end else begin
        new_val_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        new_val_ce0 = 1'b1;
    end else begin
        new_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        new_val_we0 = 1'b1;
    end else begin
        new_val_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln36_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln41_fu_181_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln70_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign final_val_address0 = zext_ln71_reg_260;

assign final_val_d0 = current_val_q0;

assign i_1_fu_187_p2 = (i1_0_reg_134 + 4'd1);

assign i_2_fu_199_p2 = (i2_0_reg_145 + 7'd1);

assign i_fu_170_p2 = (i_0_reg_123 + 7'd1);

assign icmp_ln36_fu_164_p2 = ((i_0_reg_123 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_181_p2 = ((i1_0_reg_134 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_193_p2 = ((i2_0_reg_145 == 7'd64) ? 1'b1 : 1'b0);

assign init_val_address0 = zext_ln37_fu_176_p1;

assign zext_ln37_fu_176_p1 = i_0_reg_123;

assign zext_ln71_fu_205_p1 = i2_0_reg_145;

always @ (posedge ap_clk) begin
    zext_ln37_reg_218[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln71_reg_260[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //QIO_accel_hw_int_s
