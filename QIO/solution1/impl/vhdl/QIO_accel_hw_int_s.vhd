-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity QIO_accel_hw_int_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    init_val_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    init_val_ce0 : OUT STD_LOGIC;
    init_val_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    coef_list_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    coef_list_ce0 : OUT STD_LOGIC;
    coef_list_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    coef_list_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    coef_list_ce1 : OUT STD_LOGIC;
    coef_list_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    seed : IN STD_LOGIC_VECTOR (31 downto 0);
    final_val_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    final_val_ce0 : OUT STD_LOGIC;
    final_val_we0 : OUT STD_LOGIC;
    final_val_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of QIO_accel_hw_int_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (95 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (95 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (95 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (95 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (95 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (95 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (95 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (95 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (95 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (95 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (95 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (95 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4E6E6B28 : STD_LOGIC_VECTOR (31 downto 0) := "01001110011011100110101100101000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv64_4070000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000001110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4014000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000010100000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv64_4000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_41EFFFFFFFE00000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000111101111111111111111111111111111111000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv20_F4240 : STD_LOGIC_VECTOR (19 downto 0) := "11110100001001000000";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_0_reg_219 : STD_LOGIC_VECTOR (8 downto 0);
    signal i2_0_reg_251 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_Galois_LFSR_32_33_hw_fu_269_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal grp_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_325 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal rnd_input_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rnd_input_reg_856 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln17_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_861 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_343_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln19_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_reg_870 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln23_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_2_fu_365_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal i_2_reg_892 : STD_LOGIC_VECTOR (19 downto 0);
    signal rnd_out_1_reg_897 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal rnd_out_2_reg_903 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_3_i1_reg_909 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_i2_reg_914 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_291_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_i_reg_919 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_4_i1_reg_924 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_297_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_i2_reg_929 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_reg_934 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal tmp_V_1_fu_385_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_V_1_reg_940 : STD_LOGIC_VECTOR (51 downto 0);
    signal val_V_fu_482_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_V_reg_945 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal tmp_V_2_reg_950 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal tmp_V_3_fu_504_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_V_3_reg_956 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_V_4_reg_961 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_V_5_fu_522_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_V_5_reg_967 : STD_LOGIC_VECTOR (51 downto 0);
    signal zext_ln37_fu_526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_reg_972 : STD_LOGIC_VECTOR (63 downto 0);
    signal current_val_addr_1_reg_979 : STD_LOGIC_VECTOR (7 downto 0);
    signal val_V_1_fu_623_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_V_1_reg_984 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal icmp_ln36_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_990 : STD_LOGIC_VECTOR (0 downto 0);
    signal current_val_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_val_load_reg_994 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_QIO_int_s_fu_262_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal cost_new_reg_1000 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal grp_QIO_int_s_fu_262_ap_ready : STD_LOGIC;
    signal grp_QIO_int_s_fu_262_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal grp_fu_302_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_i_reg_1011 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal grp_fu_284_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal random_reg_1016 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal grp_fu_280_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1022 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln47_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_1028 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal icmp_ln47_1_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_1_reg_1033 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_2_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_2_reg_1038 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_3_fu_804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_3_reg_1043 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln47_1_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln47_1_reg_1048 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal new_val_addr_3_gep_fu_190_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln53_fu_834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_reg_1057 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state96_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state97_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_3_fu_840_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal zext_ln55_fu_846_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_reg_1066 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state96 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal current_val_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal current_val_ce0 : STD_LOGIC;
    signal current_val_we0 : STD_LOGIC;
    signal current_val_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_val_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_val_ce0 : STD_LOGIC;
    signal new_val_we0 : STD_LOGIC;
    signal new_val_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_val_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_QIO_int_s_fu_262_ap_start : STD_LOGIC;
    signal grp_QIO_int_s_fu_262_ap_idle : STD_LOGIC;
    signal grp_QIO_int_s_fu_262_current_val_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_QIO_int_s_fu_262_current_val_ce0 : STD_LOGIC;
    signal grp_QIO_int_s_fu_262_coef_list_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_QIO_int_s_fu_262_coef_list_ce0 : STD_LOGIC;
    signal grp_QIO_int_s_fu_262_coef_list_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_QIO_int_s_fu_262_coef_list_ce1 : STD_LOGIC;
    signal grp_Galois_LFSR_32_33_hw_fu_269_ap_start : STD_LOGIC;
    signal grp_Galois_LFSR_32_33_hw_fu_269_ap_done : STD_LOGIC;
    signal grp_Galois_LFSR_32_33_hw_fu_269_ap_idle : STD_LOGIC;
    signal grp_Galois_LFSR_32_33_hw_fu_269_ap_ready : STD_LOGIC;
    signal grp_Galois_LFSR_32_33_hw_fu_269_input_r : STD_LOGIC_VECTOR (31 downto 0);
    signal rnd_input_0_reg_230 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal i1_0_reg_240 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_QIO_int_s_fu_262_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal new_val_addr_1_gep_fu_183_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal cost_old_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln40_fu_738_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_fu_743_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal grp_fu_291_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_291_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_302_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal grp_fu_312_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal p_Val2_s_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mantissa_V_fu_389_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln502_fu_402_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln502_fu_405_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_419_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_411_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_424_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_428_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1311_1_fu_436_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1285_fu_444_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln682_fu_398_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln1287_fu_440_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_fu_448_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_7_fu_460_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_454_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln662_fu_468_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_472_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_307_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_8_fu_508_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mantissa_V_1_fu_530_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln502_1_fu_543_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln502_1_fu_546_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_1_fu_560_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_1_fu_552_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_2_fu_565_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_1_fu_569_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1311_3_fu_577_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1285_1_fu_585_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln682_1_fu_539_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln1287_1_fu_581_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_2_fu_589_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_11_fu_601_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_595_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln662_1_fu_609_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_613_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal mantissa_V_2_fu_631_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln502_2_fu_644_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln502_2_fu_647_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_2_fu_661_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_2_fu_653_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_4_fu_666_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_2_fu_670_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1311_5_fu_678_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1285_2_fu_686_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln682_2_fu_640_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln1287_2_fu_682_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_4_fu_690_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_14_fu_702_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_5_fu_696_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln662_2_fu_710_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_714_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_V_2_fu_724_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln47_fu_752_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln47_1_fu_769_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_755_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln47_fu_765_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_4_fu_772_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln47_1_fu_782_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln47_fu_810_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln47_1_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln47_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_302_ce : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component QIO_int_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        current_val_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        current_val_ce0 : OUT STD_LOGIC;
        current_val_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        coef_list_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        coef_list_ce0 : OUT STD_LOGIC;
        coef_list_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        coef_list_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        coef_list_ce1 : OUT STD_LOGIC;
        coef_list_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Galois_LFSR_32_33_hw IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r : IN STD_LOGIC_VECTOR (31 downto 0);
        seed_V : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component QIO_accel_fdiv_32hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component QIO_accel_fptruncibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component QIO_accel_fcmp_32jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component QIO_accel_dmul_64kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component QIO_accel_ddiv_64lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component QIO_accel_uitodp_mb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component QIO_accel_hw_int_fYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    current_val_U : component QIO_accel_hw_int_fYi
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => current_val_address0,
        ce0 => current_val_ce0,
        we0 => current_val_we0,
        d0 => current_val_d0,
        q0 => current_val_q0);

    new_val_U : component QIO_accel_hw_int_fYi
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => new_val_address0,
        ce0 => new_val_ce0,
        we0 => new_val_we0,
        d0 => new_val_d0,
        q0 => new_val_q0);

    grp_QIO_int_s_fu_262 : component QIO_int_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_QIO_int_s_fu_262_ap_start,
        ap_done => grp_QIO_int_s_fu_262_ap_done,
        ap_idle => grp_QIO_int_s_fu_262_ap_idle,
        ap_ready => grp_QIO_int_s_fu_262_ap_ready,
        current_val_address0 => grp_QIO_int_s_fu_262_current_val_address0,
        current_val_ce0 => grp_QIO_int_s_fu_262_current_val_ce0,
        current_val_q0 => new_val_q0,
        coef_list_address0 => grp_QIO_int_s_fu_262_coef_list_address0,
        coef_list_ce0 => grp_QIO_int_s_fu_262_coef_list_ce0,
        coef_list_q0 => coef_list_q0,
        coef_list_address1 => grp_QIO_int_s_fu_262_coef_list_address1,
        coef_list_ce1 => grp_QIO_int_s_fu_262_coef_list_ce1,
        coef_list_q1 => coef_list_q1,
        ap_return => grp_QIO_int_s_fu_262_ap_return);

    grp_Galois_LFSR_32_33_hw_fu_269 : component Galois_LFSR_32_33_hw
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Galois_LFSR_32_33_hw_fu_269_ap_start,
        ap_done => grp_Galois_LFSR_32_33_hw_fu_269_ap_done,
        ap_idle => grp_Galois_LFSR_32_33_hw_fu_269_ap_idle,
        ap_ready => grp_Galois_LFSR_32_33_hw_fu_269_ap_ready,
        input_r => grp_Galois_LFSR_32_33_hw_fu_269_input_r,
        seed_V => seed,
        ap_return => grp_Galois_LFSR_32_33_hw_fu_269_ap_return);

    QIO_accel_fdiv_32hbi_U30 : component QIO_accel_fdiv_32hbi
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cost_new_reg_1000,
        din1 => cost_old_fu_120,
        ce => ap_const_logic_1,
        dout => grp_fu_280_p2);

    QIO_accel_fptruncibs_U31 : component QIO_accel_fptruncibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_i_reg_1011,
        ce => ap_const_logic_1,
        dout => grp_fu_284_p1);

    QIO_accel_fcmp_32jbC_U32 : component QIO_accel_fcmp_32jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => random_reg_1016,
        din1 => tmp_reg_1022,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_5,
        dout => grp_fu_287_p2);

    QIO_accel_dmul_64kbM_U33 : component QIO_accel_dmul_64kbM
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_291_p0,
        din1 => grp_fu_291_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_291_p2);

    QIO_accel_dmul_64kbM_U34 : component QIO_accel_dmul_64kbM
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_3_i2_reg_914,
        din1 => ap_const_lv64_4000000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_297_p2);

    QIO_accel_ddiv_64lbW_U35 : component QIO_accel_ddiv_64lbW
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_302_p0,
        din1 => ap_const_lv64_41EFFFFFFFE00000,
        ce => grp_fu_302_ce,
        dout => grp_fu_302_p2);

    QIO_accel_ddiv_64lbW_U36 : component QIO_accel_ddiv_64lbW
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_4_i2_reg_929,
        din1 => ap_const_lv64_41EFFFFFFFE00000,
        ce => ap_const_logic_1,
        dout => grp_fu_307_p2);

    QIO_accel_uitodp_mb6_U37 : component QIO_accel_uitodp_mb6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_312_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_312_p1);

    QIO_accel_uitodp_mb6_U38 : component QIO_accel_uitodp_mb6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => rnd_out_2_reg_903,
        ce => ap_const_logic_1,
        dout => grp_fu_315_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state96) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln23_fu_359_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state96))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state96);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((icmp_ln23_fu_359_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_QIO_int_s_fu_262_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_QIO_int_s_fu_262_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                    grp_QIO_int_s_fu_262_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_QIO_int_s_fu_262_ap_ready = ap_const_logic_1)) then 
                    grp_QIO_int_s_fu_262_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    cost_old_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln47_1_fu_824_p2) and (ap_const_logic_1 = ap_CS_fsm_state94))) then 
                cost_old_fu_120 <= cost_new_reg_1000;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                cost_old_fu_120 <= ap_const_lv32_4E6E6B28;
            end if; 
        end if;
    end process;

    i1_0_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
                i1_0_reg_240 <= i_2_reg_892;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i1_0_reg_240 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    i2_0_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_359_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i2_0_reg_251 <= ap_const_lv9_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln53_fu_834_p2 = ap_const_lv1_0))) then 
                i2_0_reg_251 <= i_3_fu_840_p2;
            end if; 
        end if;
    end process;

    i_0_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_fu_337_p2 = ap_const_lv1_0))) then 
                i_0_reg_219 <= i_fu_343_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_219 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    rnd_input_0_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
                rnd_input_0_reg_230 <= reg_318;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                rnd_input_0_reg_230 <= rnd_input_reg_856;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state94)) then
                and_ln47_1_reg_1048 <= and_ln47_1_fu_824_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_QIO_int_s_fu_262_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                cost_new_reg_1000 <= grp_QIO_int_s_fu_262_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                current_val_addr_1_reg_979 <= zext_ln37_fu_526_p1(8 - 1 downto 0);
                tmp_V_2_reg_950 <= p_Val2_4_fu_490_p1(62 downto 52);
                tmp_V_3_reg_956 <= tmp_V_3_fu_504_p1;
                tmp_V_4_reg_961 <= p_Val2_8_fu_508_p1(62 downto 52);
                tmp_V_5_reg_967 <= tmp_V_5_fu_522_p1;
                    zext_ln37_reg_972(31 downto 0) <= zext_ln37_fu_526_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                current_val_load_reg_994 <= current_val_q0;
                icmp_ln36_reg_990 <= icmp_ln36_fu_732_p2;
                val_V_1_reg_984 <= val_V_1_fu_623_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_2_reg_892 <= i_2_fu_365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln17_reg_861 <= icmp_ln17_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state93)) then
                icmp_ln47_1_reg_1033 <= icmp_ln47_1_fu_792_p2;
                icmp_ln47_2_reg_1038 <= icmp_ln47_2_fu_798_p2;
                icmp_ln47_3_reg_1043 <= icmp_ln47_3_fu_804_p2;
                icmp_ln47_reg_1028 <= icmp_ln47_fu_786_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln53_reg_1057 <= icmp_ln53_fu_834_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state92)) then
                random_reg_1016 <= grp_fu_284_p1;
                tmp_reg_1022 <= grp_fu_280_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_318 <= grp_Galois_LFSR_32_33_hw_fu_269_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_325 <= grp_fu_312_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    rnd_input_reg_856(31 downto 14) <= rnd_input_fu_331_p2(31 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                rnd_out_1_reg_897 <= grp_Galois_LFSR_32_33_hw_fu_269_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                rnd_out_2_reg_903 <= grp_Galois_LFSR_32_33_hw_fu_269_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state90)) then
                tmp_1_i_reg_1011 <= grp_fu_302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_3_i1_reg_909 <= grp_fu_312_p1;
                tmp_3_i2_reg_914 <= grp_fu_315_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                tmp_4_i1_reg_924 <= grp_fu_291_p2;
                tmp_4_i2_reg_929 <= grp_fu_297_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp_4_i_reg_919 <= grp_fu_291_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                tmp_V_1_reg_940 <= tmp_V_1_fu_385_p1;
                tmp_V_reg_934 <= p_Val2_s_fu_371_p1(62 downto 52);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                val_V_reg_945 <= val_V_fu_482_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_fu_337_p2 = ap_const_lv1_0))) then
                    zext_ln19_reg_870(8 downto 0) <= zext_ln19_fu_349_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln53_fu_834_p2 = ap_const_lv1_0))) then
                    zext_ln55_reg_1066(8 downto 0) <= zext_ln55_fu_846_p1(8 downto 0);
            end if;
        end if;
    end process;
    rnd_input_reg_856(13 downto 0) <= "00000000000000";
    zext_ln19_reg_870(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln37_reg_972(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln55_reg_1066(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln17_fu_337_p2, ap_enable_reg_pp0_iter0, icmp_ln23_fu_359_p2, ap_CS_fsm_state5, ap_CS_fsm_state76, grp_QIO_int_s_fu_262_ap_done, icmp_ln53_fu_834_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln17_fu_337_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln17_fu_337_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln23_fu_359_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                if (((grp_QIO_int_s_fu_262_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln53_fu_834_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln53_fu_834_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state98;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln37_fu_743_p2 <= std_logic_vector(unsigned(current_val_load_reg_994) + unsigned(val_V_1_reg_984));
    add_ln502_1_fu_546_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(zext_ln502_1_fu_543_p1));
    add_ln502_2_fu_647_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(zext_ln502_2_fu_644_p1));
    add_ln502_fu_405_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(zext_ln502_fu_402_p1));
    and_ln47_1_fu_824_p2 <= (grp_fu_287_p2 and and_ln47_fu_818_p2);
    and_ln47_fu_818_p2 <= (or_ln47_fu_810_p2 and or_ln47_1_fu_814_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(94);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(13);
    ap_CS_fsm_state16 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(16);
    ap_CS_fsm_state19 <= ap_CS_fsm(17);
    ap_CS_fsm_state20 <= ap_CS_fsm(18);
    ap_CS_fsm_state21 <= ap_CS_fsm(19);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state49 <= ap_CS_fsm(47);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state50 <= ap_CS_fsm(48);
    ap_CS_fsm_state51 <= ap_CS_fsm(49);
    ap_CS_fsm_state52 <= ap_CS_fsm(50);
    ap_CS_fsm_state53 <= ap_CS_fsm(51);
    ap_CS_fsm_state54 <= ap_CS_fsm(52);
    ap_CS_fsm_state55 <= ap_CS_fsm(53);
    ap_CS_fsm_state56 <= ap_CS_fsm(54);
    ap_CS_fsm_state57 <= ap_CS_fsm(55);
    ap_CS_fsm_state58 <= ap_CS_fsm(56);
    ap_CS_fsm_state59 <= ap_CS_fsm(57);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state60 <= ap_CS_fsm(58);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state75 <= ap_CS_fsm(73);
    ap_CS_fsm_state76 <= ap_CS_fsm(74);
    ap_CS_fsm_state77 <= ap_CS_fsm(75);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
    ap_CS_fsm_state90 <= ap_CS_fsm(88);
    ap_CS_fsm_state91 <= ap_CS_fsm(89);
    ap_CS_fsm_state92 <= ap_CS_fsm(90);
    ap_CS_fsm_state93 <= ap_CS_fsm(91);
    ap_CS_fsm_state94 <= ap_CS_fsm(92);
    ap_CS_fsm_state95 <= ap_CS_fsm(93);
    ap_CS_fsm_state98 <= ap_CS_fsm(95);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state96_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state97_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln17_fu_337_p2)
    begin
        if ((icmp_ln17_fu_337_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state96_assign_proc : process(icmp_ln53_fu_834_p2)
    begin
        if ((icmp_ln53_fu_834_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state96 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state96 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state98)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state98) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state98)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln47_1_fu_769_p1 <= tmp_reg_1022;
    bitcast_ln47_fu_752_p1 <= random_reg_1016;
    coef_list_address0 <= grp_QIO_int_s_fu_262_coef_list_address0;
    coef_list_address1 <= grp_QIO_int_s_fu_262_coef_list_address1;
    coef_list_ce0 <= grp_QIO_int_s_fu_262_coef_list_ce0;
    coef_list_ce1 <= grp_QIO_int_s_fu_262_coef_list_ce1;

    current_val_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, zext_ln19_reg_870, ap_CS_fsm_state51, zext_ln37_fu_526_p1, current_val_addr_1_reg_979, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, zext_ln55_fu_846_p1, ap_enable_reg_pp0_iter1, ap_CS_fsm_state95, ap_block_pp0_stage0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            current_val_address0 <= zext_ln55_fu_846_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            current_val_address0 <= current_val_addr_1_reg_979;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            current_val_address0 <= zext_ln37_fu_526_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            current_val_address0 <= zext_ln19_reg_870(8 - 1 downto 0);
        else 
            current_val_address0 <= "XXXXXXXX";
        end if; 
    end process;


    current_val_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state51, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state51) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            current_val_ce0 <= ap_const_logic_1;
        else 
            current_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    current_val_d0_assign_proc : process(init_val_q0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, new_val_q0, ap_CS_fsm_state95, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            current_val_d0 <= new_val_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            current_val_d0 <= init_val_q0;
        else 
            current_val_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    current_val_we0_assign_proc : process(icmp_ln17_reg_861, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, and_ln47_1_reg_1048, ap_enable_reg_pp0_iter1, ap_CS_fsm_state95)
    begin
        if ((((ap_const_lv1_1 = and_ln47_1_reg_1048) and (ap_const_logic_1 = ap_CS_fsm_state95)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_861 = ap_const_lv1_0)))) then 
            current_val_we0 <= ap_const_logic_1;
        else 
            current_val_we0 <= ap_const_logic_0;
        end if; 
    end process;

    final_val_address0 <= zext_ln55_reg_1066(8 - 1 downto 0);

    final_val_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            final_val_ce0 <= ap_const_logic_1;
        else 
            final_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    final_val_d0 <= current_val_q0;

    final_val_we0_assign_proc : process(icmp_ln53_reg_1057, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln53_reg_1057 = ap_const_lv1_0))) then 
            final_val_we0 <= ap_const_logic_1;
        else 
            final_val_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_Galois_LFSR_32_33_hw_fu_269_ap_start_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state53, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_Galois_LFSR_32_33_hw_fu_269_ap_start <= ap_const_logic_1;
        else 
            grp_Galois_LFSR_32_33_hw_fu_269_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_Galois_LFSR_32_33_hw_fu_269_input_r_assign_proc : process(reg_318, ap_CS_fsm_state6, ap_CS_fsm_state53, rnd_out_1_reg_897, ap_CS_fsm_state7, rnd_out_2_reg_903, ap_CS_fsm_state8, rnd_input_0_reg_230)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            grp_Galois_LFSR_32_33_hw_fu_269_input_r <= rnd_out_2_reg_903;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_Galois_LFSR_32_33_hw_fu_269_input_r <= rnd_out_1_reg_897;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_Galois_LFSR_32_33_hw_fu_269_input_r <= reg_318;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_Galois_LFSR_32_33_hw_fu_269_input_r <= rnd_input_0_reg_230;
        else 
            grp_Galois_LFSR_32_33_hw_fu_269_input_r <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_QIO_int_s_fu_262_ap_start <= grp_QIO_int_s_fu_262_ap_start_reg;

    grp_fu_291_p0_assign_proc : process(reg_325, tmp_3_i1_reg_909, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_291_p0 <= tmp_3_i1_reg_909;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_291_p0 <= reg_325;
        else 
            grp_fu_291_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_291_p1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_291_p1 <= ap_const_lv64_4014000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_291_p1 <= ap_const_lv64_4070000000000000;
        else 
            grp_fu_291_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_302_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state53, ap_CS_fsm_state12, ap_CS_fsm_state59, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state52, ap_CS_fsm_state76, grp_QIO_int_s_fu_262_ap_done, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state4, ap_CS_fsm_state95, ap_CS_fsm_state91, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state9, ap_CS_fsm_state54, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state98)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state1) or ((grp_QIO_int_s_fu_262_ap_done = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then 
            grp_fu_302_ce <= ap_const_logic_0;
        else 
            grp_fu_302_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_302_p0_assign_proc : process(reg_325, tmp_4_i_reg_919, tmp_4_i1_reg_924, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_fu_302_p0 <= reg_325;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_302_p0 <= tmp_4_i1_reg_924;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_302_p0 <= tmp_4_i_reg_919;
        else 
            grp_fu_302_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_312_p0_assign_proc : process(reg_318, rnd_out_1_reg_897, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_312_p0 <= rnd_out_1_reg_897;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_312_p0 <= reg_318;
        else 
            grp_fu_312_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_2_fu_365_p2 <= std_logic_vector(unsigned(i1_0_reg_240) + unsigned(ap_const_lv20_1));
    i_3_fu_840_p2 <= std_logic_vector(unsigned(i2_0_reg_251) + unsigned(ap_const_lv9_1));
    i_fu_343_p2 <= std_logic_vector(unsigned(i_0_reg_219) + unsigned(ap_const_lv9_1));
    icmp_ln17_fu_337_p2 <= "1" when (i_0_reg_219 = ap_const_lv9_100) else "0";
    icmp_ln23_fu_359_p2 <= "1" when (i1_0_reg_240 = ap_const_lv20_F4240) else "0";
    icmp_ln36_fu_732_p2 <= "1" when (val_V_2_fu_724_p3 = ap_const_lv32_0) else "0";
    icmp_ln47_1_fu_792_p2 <= "1" when (trunc_ln47_fu_765_p1 = ap_const_lv23_0) else "0";
    icmp_ln47_2_fu_798_p2 <= "0" when (tmp_4_fu_772_p4 = ap_const_lv8_FF) else "1";
    icmp_ln47_3_fu_804_p2 <= "1" when (trunc_ln47_1_fu_782_p1 = ap_const_lv23_0) else "0";
    icmp_ln47_fu_786_p2 <= "0" when (tmp_3_fu_755_p4 = ap_const_lv8_FF) else "1";
    icmp_ln53_fu_834_p2 <= "1" when (i2_0_reg_251 = ap_const_lv9_100) else "0";
    init_val_address0 <= zext_ln19_fu_349_p1(8 - 1 downto 0);

    init_val_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            init_val_ce0 <= ap_const_logic_1;
        else 
            init_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_1_fu_552_p3 <= add_ln502_1_fu_546_p2(11 downto 11);
    isNeg_2_fu_653_p3 <= add_ln502_2_fu_647_p2(11 downto 11);
    isNeg_fu_411_p3 <= add_ln502_fu_405_p2(11 downto 11);
    mantissa_V_1_fu_530_p4 <= ((ap_const_lv1_1 & tmp_V_3_reg_956) & ap_const_lv1_0);
    mantissa_V_2_fu_631_p4 <= ((ap_const_lv1_1 & tmp_V_5_reg_967) & ap_const_lv1_0);
    mantissa_V_fu_389_p4 <= ((ap_const_lv1_1 & tmp_V_1_reg_940) & ap_const_lv1_0);
    new_val_addr_1_gep_fu_183_p3 <= zext_ln37_reg_972(8 - 1 downto 0);
    new_val_addr_3_gep_fu_190_p3 <= zext_ln37_reg_972(8 - 1 downto 0);

    new_val_address0_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_pp0_stage0, zext_ln19_reg_870, zext_ln37_reg_972, icmp_ln36_reg_990, ap_CS_fsm_state76, ap_CS_fsm_state94, new_val_addr_3_gep_fu_190_p3, ap_enable_reg_pp0_iter1, grp_QIO_int_s_fu_262_current_val_address0, ap_block_pp0_stage0, new_val_addr_1_gep_fu_183_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            new_val_address0 <= new_val_addr_3_gep_fu_190_p3;
        elsif (((icmp_ln36_reg_990 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            new_val_address0 <= new_val_addr_1_gep_fu_183_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) and (icmp_ln36_reg_990 = ap_const_lv1_0))) then 
            new_val_address0 <= zext_ln37_reg_972(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            new_val_address0 <= zext_ln19_reg_870(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            new_val_address0 <= grp_QIO_int_s_fu_262_current_val_address0;
        else 
            new_val_address0 <= "XXXXXXXX";
        end if; 
    end process;


    new_val_ce0_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln36_reg_990, ap_CS_fsm_state76, ap_CS_fsm_state94, ap_enable_reg_pp0_iter1, grp_QIO_int_s_fu_262_current_val_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln36_reg_990 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((ap_const_logic_1 = ap_CS_fsm_state53) and (icmp_ln36_reg_990 = ap_const_lv1_0)))) then 
            new_val_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            new_val_ce0 <= grp_QIO_int_s_fu_262_current_val_ce0;
        else 
            new_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_val_d0_assign_proc : process(init_val_q0, ap_CS_fsm_state53, ap_CS_fsm_pp0_stage0, icmp_ln36_reg_990, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, sub_ln40_fu_738_p2, add_ln37_fu_743_p2)
    begin
        if (((icmp_ln36_reg_990 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            new_val_d0 <= add_ln37_fu_743_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) and (icmp_ln36_reg_990 = ap_const_lv1_0))) then 
            new_val_d0 <= sub_ln40_fu_738_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            new_val_d0 <= init_val_q0;
        else 
            new_val_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    new_val_we0_assign_proc : process(ap_CS_fsm_state53, icmp_ln17_reg_861, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln36_reg_990, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_861 = ap_const_lv1_0)) or ((icmp_ln36_reg_990 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((ap_const_logic_1 = ap_CS_fsm_state53) and (icmp_ln36_reg_990 = ap_const_lv1_0)))) then 
            new_val_we0 <= ap_const_logic_1;
        else 
            new_val_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln47_1_fu_814_p2 <= (icmp_ln47_3_reg_1043 or icmp_ln47_2_reg_1038);
    or_ln47_fu_810_p2 <= (icmp_ln47_reg_1028 or icmp_ln47_1_reg_1033);
    p_Val2_4_fu_490_p1 <= grp_fu_302_p2;
    p_Val2_8_fu_508_p1 <= grp_fu_307_p2;
    p_Val2_s_fu_371_p1 <= grp_fu_302_p2;
    r_V_1_fu_454_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_398_p1),to_integer(unsigned('0' & zext_ln1287_fu_440_p1(31-1 downto 0)))));
    r_V_2_fu_589_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_1_fu_530_p4),to_integer(unsigned('0' & zext_ln1285_1_fu_585_p1(31-1 downto 0)))));
    r_V_3_fu_595_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_1_fu_539_p1),to_integer(unsigned('0' & zext_ln1287_1_fu_581_p1(31-1 downto 0)))));
    r_V_4_fu_690_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_2_fu_631_p4),to_integer(unsigned('0' & zext_ln1285_2_fu_686_p1(31-1 downto 0)))));
    r_V_5_fu_696_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_2_fu_640_p1),to_integer(unsigned('0' & zext_ln1287_2_fu_682_p1(31-1 downto 0)))));
    r_V_fu_448_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_389_p4),to_integer(unsigned('0' & zext_ln1285_fu_444_p1(31-1 downto 0)))));
    rnd_input_fu_331_p2 <= std_logic_vector(shift_left(unsigned(seed),to_integer(unsigned('0' & ap_const_lv32_E(31-1 downto 0)))));
        sext_ln1311_1_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_428_p3),32));

        sext_ln1311_2_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_1_fu_560_p2),12));

        sext_ln1311_3_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_569_p3),32));

        sext_ln1311_4_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_2_fu_661_p2),12));

        sext_ln1311_5_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_2_fu_670_p3),32));

        sext_ln1311_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_419_p2),12));

    sub_ln1311_1_fu_560_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_2_reg_950));
    sub_ln1311_2_fu_661_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_4_reg_961));
    sub_ln1311_fu_419_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_reg_934));
    sub_ln40_fu_738_p2 <= std_logic_vector(unsigned(current_val_load_reg_994) - unsigned(val_V_1_reg_984));
    tmp_11_fu_601_p3 <= r_V_2_fu_589_p2(53 downto 53);
    tmp_14_fu_702_p3 <= r_V_4_fu_690_p2(53 downto 53);
    tmp_3_fu_755_p4 <= bitcast_ln47_fu_752_p1(30 downto 23);
    tmp_4_fu_772_p4 <= bitcast_ln47_1_fu_769_p1(30 downto 23);
    tmp_6_fu_714_p4 <= r_V_5_fu_696_p2(84 downto 53);
    tmp_7_fu_460_p3 <= r_V_fu_448_p2(53 downto 53);
    tmp_8_fu_472_p4 <= r_V_1_fu_454_p2(84 downto 53);
    tmp_V_1_fu_385_p1 <= p_Val2_s_fu_371_p1(52 - 1 downto 0);
    tmp_V_3_fu_504_p1 <= p_Val2_4_fu_490_p1(52 - 1 downto 0);
    tmp_V_5_fu_522_p1 <= p_Val2_8_fu_508_p1(52 - 1 downto 0);
    tmp_s_fu_613_p4 <= r_V_3_fu_595_p2(84 downto 53);
    trunc_ln47_1_fu_782_p1 <= bitcast_ln47_1_fu_769_p1(23 - 1 downto 0);
    trunc_ln47_fu_765_p1 <= bitcast_ln47_fu_752_p1(23 - 1 downto 0);
    ush_1_fu_569_p3 <= 
        sext_ln1311_2_fu_565_p1 when (isNeg_1_fu_552_p3(0) = '1') else 
        add_ln502_1_fu_546_p2;
    ush_2_fu_670_p3 <= 
        sext_ln1311_4_fu_666_p1 when (isNeg_2_fu_653_p3(0) = '1') else 
        add_ln502_2_fu_647_p2;
    ush_fu_428_p3 <= 
        sext_ln1311_fu_424_p1 when (isNeg_fu_411_p3(0) = '1') else 
        add_ln502_fu_405_p2;
    val_V_1_fu_623_p3 <= 
        zext_ln662_1_fu_609_p1 when (isNeg_1_fu_552_p3(0) = '1') else 
        tmp_s_fu_613_p4;
    val_V_2_fu_724_p3 <= 
        zext_ln662_2_fu_710_p1 when (isNeg_2_fu_653_p3(0) = '1') else 
        tmp_6_fu_714_p4;
    val_V_fu_482_p3 <= 
        zext_ln662_fu_468_p1 when (isNeg_fu_411_p3(0) = '1') else 
        tmp_8_fu_472_p4;
    zext_ln1285_1_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_3_fu_577_p1),54));
    zext_ln1285_2_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_5_fu_678_p1),54));
    zext_ln1285_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_436_p1),54));
    zext_ln1287_1_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_3_fu_577_p1),137));
    zext_ln1287_2_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_5_fu_678_p1),137));
    zext_ln1287_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_436_p1),137));
    zext_ln19_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_219),64));
    zext_ln37_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_V_reg_945),64));
    zext_ln502_1_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_2_reg_950),12));
    zext_ln502_2_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_4_reg_961),12));
    zext_ln502_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_934),12));
    zext_ln55_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_251),64));
    zext_ln662_1_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_601_p3),32));
    zext_ln662_2_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_702_p3),32));
    zext_ln662_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_460_p3),32));
    zext_ln682_1_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_1_fu_530_p4),137));
    zext_ln682_2_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_2_fu_631_p4),137));
    zext_ln682_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_389_p4),137));
end behav;
