-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity QIO_accel_hw_int_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    init_val_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    init_val_ce0 : OUT STD_LOGIC;
    init_val_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    final_val_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    final_val_ce0 : OUT STD_LOGIC;
    final_val_we0 : OUT STD_LOGIC;
    final_val_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of QIO_accel_hw_int_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_170_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_213 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln37_fu_176_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_reg_218 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln36_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal new_val_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_val_load_reg_239 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_187_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_247 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_2_fu_199_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_reg_255 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln71_fu_205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_reg_260 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln70_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal current_val_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal current_val_ce0 : STD_LOGIC;
    signal current_val_we0 : STD_LOGIC;
    signal current_val_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_val_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_val_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal new_val_ce0 : STD_LOGIC;
    signal new_val_we0 : STD_LOGIC;
    signal grp_Galois_LFSR_32_33_hw_fu_156_ap_start : STD_LOGIC;
    signal grp_Galois_LFSR_32_33_hw_fu_156_ap_done : STD_LOGIC;
    signal grp_Galois_LFSR_32_33_hw_fu_156_ap_idle : STD_LOGIC;
    signal grp_Galois_LFSR_32_33_hw_fu_156_ap_ready : STD_LOGIC;
    signal i_0_reg_123 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i1_0_reg_134 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i2_0_reg_145 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln41_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component Galois_LFSR_32_33_hw IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC );
    end component;


    component QIO_accel_hw_int_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    current_val_U : component QIO_accel_hw_int_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => current_val_address0,
        ce0 => current_val_ce0,
        we0 => current_val_we0,
        d0 => current_val_d0,
        q0 => current_val_q0);

    new_val_U : component QIO_accel_hw_int_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => new_val_address0,
        ce0 => new_val_ce0,
        we0 => new_val_we0,
        d0 => init_val_q0,
        q0 => new_val_q0);

    grp_Galois_LFSR_32_33_hw_fu_156 : component Galois_LFSR_32_33_hw
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Galois_LFSR_32_33_hw_fu_156_ap_start,
        ap_done => grp_Galois_LFSR_32_33_hw_fu_156_ap_done,
        ap_idle => grp_Galois_LFSR_32_33_hw_fu_156_ap_idle,
        ap_ready => grp_Galois_LFSR_32_33_hw_fu_156_ap_ready);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_0_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i1_0_reg_134 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i1_0_reg_134 <= i_1_reg_247;
            end if; 
        end if;
    end process;

    i2_0_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_fu_181_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i2_0_reg_145 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i2_0_reg_145 <= i_2_reg_255;
            end if; 
        end if;
    end process;

    i_0_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_123 <= i_reg_213;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_123 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_1_reg_247 <= i_1_fu_187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_2_reg_255 <= i_2_fu_199_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_213 <= i_fu_170_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                new_val_load_reg_239 <= new_val_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_fu_164_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln37_reg_218(6 downto 0) <= zext_ln37_fu_176_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln70_fu_193_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    zext_ln71_reg_260(6 downto 0) <= zext_ln71_fu_205_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln37_reg_218(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln71_reg_260(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln36_fu_164_p2, ap_CS_fsm_state5, ap_CS_fsm_state10, icmp_ln70_fu_193_p2, icmp_ln41_fu_181_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln36_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln41_fu_181_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln70_fu_193_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10, icmp_ln70_fu_193_p2)
    begin
        if ((((icmp_ln70_fu_193_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10, icmp_ln70_fu_193_p2)
    begin
        if (((icmp_ln70_fu_193_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    current_val_address0_assign_proc : process(zext_ln37_reg_218, ap_CS_fsm_state5, ap_CS_fsm_state10, zext_ln71_fu_205_p1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            current_val_address0 <= zext_ln71_fu_205_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            current_val_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            current_val_address0 <= zext_ln37_reg_218(6 - 1 downto 0);
        else 
            current_val_address0 <= "XXXXXX";
        end if; 
    end process;


    current_val_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            current_val_ce0 <= ap_const_logic_1;
        else 
            current_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    current_val_d0_assign_proc : process(init_val_q0, new_val_load_reg_239, ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            current_val_d0 <= new_val_load_reg_239;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            current_val_d0 <= init_val_q0;
        else 
            current_val_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    current_val_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state3, icmp_ln41_fu_181_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln41_fu_181_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            current_val_we0 <= ap_const_logic_1;
        else 
            current_val_we0 <= ap_const_logic_0;
        end if; 
    end process;

    final_val_address0 <= zext_ln71_reg_260(6 - 1 downto 0);

    final_val_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            final_val_ce0 <= ap_const_logic_1;
        else 
            final_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    final_val_d0 <= current_val_q0;

    final_val_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            final_val_we0 <= ap_const_logic_1;
        else 
            final_val_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_Galois_LFSR_32_33_hw_fu_156_ap_start_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_Galois_LFSR_32_33_hw_fu_156_ap_start <= ap_const_logic_1;
        else 
            grp_Galois_LFSR_32_33_hw_fu_156_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_187_p2 <= std_logic_vector(unsigned(i1_0_reg_134) + unsigned(ap_const_lv4_1));
    i_2_fu_199_p2 <= std_logic_vector(unsigned(i2_0_reg_145) + unsigned(ap_const_lv7_1));
    i_fu_170_p2 <= std_logic_vector(unsigned(i_0_reg_123) + unsigned(ap_const_lv7_1));
    icmp_ln36_fu_164_p2 <= "1" when (i_0_reg_123 = ap_const_lv7_40) else "0";
    icmp_ln41_fu_181_p2 <= "1" when (i1_0_reg_134 = ap_const_lv4_A) else "0";
    icmp_ln70_fu_193_p2 <= "1" when (i2_0_reg_145 = ap_const_lv7_40) else "0";
    init_val_address0 <= zext_ln37_fu_176_p1(6 - 1 downto 0);

    init_val_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            init_val_ce0 <= ap_const_logic_1;
        else 
            init_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_val_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln37_reg_218, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            new_val_address0 <= zext_ln37_reg_218(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            new_val_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            new_val_address0 <= "XXXXXX";
        end if; 
    end process;


    new_val_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            new_val_ce0 <= ap_const_logic_1;
        else 
            new_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_val_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            new_val_we0 <= ap_const_logic_1;
        else 
            new_val_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln37_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_123),64));
    zext_ln71_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_145),64));
end behav;
