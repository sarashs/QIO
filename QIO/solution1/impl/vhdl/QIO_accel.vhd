-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity QIO_accel is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_TVALID : IN STD_LOGIC;
    input_r_TREADY : OUT STD_LOGIC;
    input_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    output_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC;
    output_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of QIO_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "QIO_accel,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=4542,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=205,HLS_SYN_LUT=627,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln105_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln111_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln129_reg_247 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal icmp_ln129_reg_247_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i1_reg_153 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_fu_180_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal add_ln111_fu_202_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal icmp_ln129_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state7_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_state9_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state9_io : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal i_3_fu_214_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal icmp_ln133_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln133_reg_256 : STD_LOGIC_VECTOR (0 downto 0);
    signal final_val_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_QIO_accel_hw_int_s_fu_164_ap_ready : STD_LOGIC;
    signal grp_QIO_accel_hw_int_s_fu_164_ap_done : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state7 : STD_LOGIC;
    signal init_val_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal init_val_ce0 : STD_LOGIC;
    signal init_val_we0 : STD_LOGIC;
    signal init_val_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal final_val_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal final_val_ce0 : STD_LOGIC;
    signal final_val_we0 : STD_LOGIC;
    signal grp_QIO_accel_hw_int_s_fu_164_ap_start : STD_LOGIC;
    signal grp_QIO_accel_hw_int_s_fu_164_ap_idle : STD_LOGIC;
    signal grp_QIO_accel_hw_int_s_fu_164_init_val_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_QIO_accel_hw_int_s_fu_164_init_val_ce0 : STD_LOGIC;
    signal grp_QIO_accel_hw_int_s_fu_164_final_val_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_QIO_accel_hw_int_s_fu_164_final_val_ce0 : STD_LOGIC;
    signal grp_QIO_accel_hw_int_s_fu_164_final_val_we0 : STD_LOGIC;
    signal grp_QIO_accel_hw_int_s_fu_164_final_val_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_131 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_reg_142 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_QIO_accel_hw_int_s_fu_164_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln107_fu_186_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_fu_226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal regslice_both_output_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal regslice_both_input_data_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal input_r_TVALID_int : STD_LOGIC;
    signal input_r_TREADY_int : STD_LOGIC;
    signal regslice_both_input_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_last_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_last_V_U_ack_in : STD_LOGIC;
    signal output_r_TVALID_int : STD_LOGIC;
    signal output_r_TREADY_int : STD_LOGIC;
    signal regslice_both_output_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_last_V_U_vld_out : STD_LOGIC;

    component QIO_accel_hw_int_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        init_val_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        init_val_ce0 : OUT STD_LOGIC;
        init_val_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        final_val_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        final_val_ce0 : OUT STD_LOGIC;
        final_val_we0 : OUT STD_LOGIC;
        final_val_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component QIO_accel_hw_int_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component QIO_accel_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    QIO_accel_AXILiteS_s_axi_U : component QIO_accel_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    init_val_U : component QIO_accel_hw_int_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => init_val_address0,
        ce0 => init_val_ce0,
        we0 => init_val_we0,
        d0 => input_r_TDATA_int,
        q0 => init_val_q0);

    final_val_U : component QIO_accel_hw_int_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => final_val_address0,
        ce0 => final_val_ce0,
        we0 => final_val_we0,
        d0 => grp_QIO_accel_hw_int_s_fu_164_final_val_d0,
        q0 => final_val_q0);

    grp_QIO_accel_hw_int_s_fu_164 : component QIO_accel_hw_int_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_QIO_accel_hw_int_s_fu_164_ap_start,
        ap_done => grp_QIO_accel_hw_int_s_fu_164_ap_done,
        ap_idle => grp_QIO_accel_hw_int_s_fu_164_ap_idle,
        ap_ready => grp_QIO_accel_hw_int_s_fu_164_ap_ready,
        init_val_address0 => grp_QIO_accel_hw_int_s_fu_164_init_val_address0,
        init_val_ce0 => grp_QIO_accel_hw_int_s_fu_164_init_val_ce0,
        init_val_q0 => init_val_q0,
        final_val_address0 => grp_QIO_accel_hw_int_s_fu_164_final_val_address0,
        final_val_ce0 => grp_QIO_accel_hw_int_s_fu_164_final_val_ce0,
        final_val_we0 => grp_QIO_accel_hw_int_s_fu_164_final_val_we0,
        final_val_d0 => grp_QIO_accel_hw_int_s_fu_164_final_val_d0);

    regslice_both_input_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TDATA,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_data_V_U_ack_in,
        data_out => input_r_TDATA_int,
        vld_out => input_r_TVALID_int,
        ack_out => input_r_TREADY_int,
        apdone_blk => regslice_both_input_data_V_U_apdone_blk);

    regslice_both_input_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TLAST,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_last_V_U_ack_in,
        data_out => input_r_TLAST_int,
        vld_out => regslice_both_input_last_V_U_vld_out,
        ack_out => input_r_TREADY_int,
        apdone_blk => regslice_both_input_last_V_U_apdone_blk);

    regslice_both_output_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => final_val_q0,
        vld_in => output_r_TVALID_int,
        ack_in => output_r_TREADY_int,
        data_out => output_r_TDATA,
        vld_out => regslice_both_output_data_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_data_V_U_apdone_blk);

    regslice_both_output_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => icmp_ln133_reg_256,
        vld_in => output_r_TVALID_int,
        ack_in => regslice_both_output_last_V_U_ack_in_dummy,
        data_out => output_r_TLAST,
        vld_out => regslice_both_output_last_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state7) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_QIO_accel_hw_int_s_fu_164_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state7)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state7);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_QIO_accel_hw_int_s_fu_164_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_QIO_accel_hw_int_s_fu_164_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_QIO_accel_hw_int_s_fu_164_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_QIO_accel_hw_int_s_fu_164_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_QIO_accel_hw_int_s_fu_164_ap_ready = ap_const_logic_1)) then 
                    grp_QIO_accel_hw_int_s_fu_164_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i1_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                i_0_i1_reg_153 <= i_3_fu_214_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_QIO_accel_hw_int_s_fu_164_ap_done = ap_const_logic_1))) then 
                i_0_i1_reg_153 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln105_fu_174_p2 = ap_const_lv1_0) and (input_r_TVALID_int = ap_const_logic_0))) and (icmp_ln105_fu_174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_i_reg_131 <= i_fu_180_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_i_reg_131 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_142 <= ap_const_lv13_0;
            elsif ((not(((icmp_ln111_fu_196_p2 = ap_const_lv1_0) and (input_r_TVALID_int = ap_const_logic_0))) and (icmp_ln111_fu_196_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                indvar_flatten_reg_142 <= add_ln111_fu_202_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln129_reg_247 <= icmp_ln129_fu_208_p2;
                icmp_ln129_reg_247_pp2_iter1_reg <= icmp_ln129_reg_247;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln133_reg_256 <= icmp_ln133_fu_220_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln105_fu_174_p2, ap_CS_fsm_state4, icmp_ln111_fu_196_p2, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, icmp_ln129_fu_208_p2, ap_enable_reg_pp2_iter0, ap_CS_fsm_state6, grp_QIO_accel_hw_int_s_fu_164_ap_done, ap_block_pp2_stage0_subdone, ap_CS_fsm_state10, regslice_both_output_data_V_U_apdone_blk, input_r_TVALID_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln105_fu_174_p2 = ap_const_lv1_0) and (input_r_TVALID_int = ap_const_logic_0))) and (icmp_ln105_fu_174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((icmp_ln105_fu_174_p2 = ap_const_lv1_0) and (input_r_TVALID_int = ap_const_logic_0))) and (icmp_ln105_fu_174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if ((not(((icmp_ln111_fu_196_p2 = ap_const_lv1_0) and (input_r_TVALID_int = ap_const_logic_0))) and (icmp_ln111_fu_196_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((icmp_ln111_fu_196_p2 = ap_const_lv1_0) and (input_r_TVALID_int = ap_const_logic_0))) and (icmp_ln111_fu_196_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_QIO_accel_hw_int_s_fu_164_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln129_fu_208_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln129_fu_208_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                if (((regslice_both_output_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln111_fu_202_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_142) + unsigned(ap_const_lv13_1));
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_block_state8_io, ap_block_state9_io)
    begin
                ap_block_pp2_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state9_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state8_io) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_block_state8_io, ap_block_state9_io)
    begin
                ap_block_pp2_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state9_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state8_io) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state2_assign_proc : process(icmp_ln105_fu_174_p2, input_r_TVALID_int)
    begin
                ap_block_state2 <= ((icmp_ln105_fu_174_p2 = ap_const_lv1_0) and (input_r_TVALID_int = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(icmp_ln111_fu_196_p2, input_r_TVALID_int)
    begin
                ap_block_state4 <= ((icmp_ln111_fu_196_p2 = ap_const_lv1_0) and (input_r_TVALID_int = ap_const_logic_0));
    end process;

        ap_block_state7_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_io_assign_proc : process(icmp_ln129_reg_247, output_r_TREADY_int)
    begin
                ap_block_state8_io <= ((icmp_ln129_reg_247 = ap_const_lv1_0) and (output_r_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state8_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_io_assign_proc : process(icmp_ln129_reg_247_pp2_iter1_reg, output_r_TREADY_int)
    begin
                ap_block_state9_io <= ((icmp_ln129_reg_247_pp2_iter1_reg = ap_const_lv1_0) and (output_r_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state9_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp2_exit_iter0_state7_assign_proc : process(icmp_ln129_fu_208_p2)
    begin
        if ((icmp_ln129_fu_208_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state10, regslice_both_output_data_V_U_apdone_blk)
    begin
        if (((regslice_both_output_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10, regslice_both_output_data_V_U_apdone_blk)
    begin
        if (((regslice_both_output_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    final_val_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_state6, grp_QIO_accel_hw_int_s_fu_164_final_val_address0, zext_ln136_fu_226_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            final_val_address0 <= zext_ln136_fu_226_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            final_val_address0 <= grp_QIO_accel_hw_int_s_fu_164_final_val_address0;
        else 
            final_val_address0 <= "XXXXXX";
        end if; 
    end process;


    final_val_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_state6, grp_QIO_accel_hw_int_s_fu_164_final_val_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            final_val_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            final_val_ce0 <= grp_QIO_accel_hw_int_s_fu_164_final_val_ce0;
        else 
            final_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    final_val_we0_assign_proc : process(ap_CS_fsm_state6, grp_QIO_accel_hw_int_s_fu_164_final_val_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            final_val_we0 <= grp_QIO_accel_hw_int_s_fu_164_final_val_we0;
        else 
            final_val_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_QIO_accel_hw_int_s_fu_164_ap_start <= grp_QIO_accel_hw_int_s_fu_164_ap_start_reg;
    i_3_fu_214_p2 <= std_logic_vector(unsigned(i_0_i1_reg_153) + unsigned(ap_const_lv7_1));
    i_fu_180_p2 <= std_logic_vector(unsigned(i_0_i_reg_131) + unsigned(ap_const_lv7_1));
    icmp_ln105_fu_174_p2 <= "1" when (i_0_i_reg_131 = ap_const_lv7_40) else "0";
    icmp_ln111_fu_196_p2 <= "1" when (indvar_flatten_reg_142 = ap_const_lv13_1000) else "0";
    icmp_ln129_fu_208_p2 <= "1" when (i_0_i1_reg_153 = ap_const_lv7_40) else "0";
    icmp_ln133_fu_220_p2 <= "1" when (i_0_i1_reg_153 = ap_const_lv7_3F) else "0";

    init_val_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, grp_QIO_accel_hw_int_s_fu_164_init_val_address0, zext_ln107_fu_186_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            init_val_address0 <= zext_ln107_fu_186_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            init_val_address0 <= grp_QIO_accel_hw_int_s_fu_164_init_val_address0;
        else 
            init_val_address0 <= "XXXXXX";
        end if; 
    end process;


    init_val_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln105_fu_174_p2, ap_CS_fsm_state6, grp_QIO_accel_hw_int_s_fu_164_init_val_ce0, input_r_TVALID_int)
    begin
        if ((not(((icmp_ln105_fu_174_p2 = ap_const_lv1_0) and (input_r_TVALID_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            init_val_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            init_val_ce0 <= grp_QIO_accel_hw_int_s_fu_164_init_val_ce0;
        else 
            init_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    init_val_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln105_fu_174_p2, input_r_TVALID_int)
    begin
        if ((not(((icmp_ln105_fu_174_p2 = ap_const_lv1_0) and (input_r_TVALID_int = ap_const_logic_0))) and (icmp_ln105_fu_174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            init_val_we0 <= ap_const_logic_1;
        else 
            init_val_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln105_fu_174_p2, ap_CS_fsm_state4, icmp_ln111_fu_196_p2, input_r_TVALID_int)
    begin
        if ((((icmp_ln111_fu_196_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln105_fu_174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            input_r_TDATA_blk_n <= input_r_TVALID_int;
        else 
            input_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_r_TREADY_assign_proc : process(input_r_TVALID, regslice_both_input_data_V_U_ack_in)
    begin
        if (((regslice_both_input_data_V_U_ack_in = ap_const_logic_1) and (input_r_TVALID = ap_const_logic_1))) then 
            input_r_TREADY <= ap_const_logic_1;
        else 
            input_r_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_r_TREADY_int_assign_proc : process(ap_CS_fsm_state2, icmp_ln105_fu_174_p2, ap_CS_fsm_state4, icmp_ln111_fu_196_p2, input_r_TVALID_int)
    begin
        if (((not(((icmp_ln111_fu_196_p2 = ap_const_lv1_0) and (input_r_TVALID_int = ap_const_logic_0))) and (icmp_ln111_fu_196_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((icmp_ln105_fu_174_p2 = ap_const_lv1_0) and (input_r_TVALID_int = ap_const_logic_0))) and (icmp_ln105_fu_174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            input_r_TREADY_int <= ap_const_logic_1;
        else 
            input_r_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    output_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln129_reg_247, ap_enable_reg_pp2_iter2, icmp_ln129_reg_247_pp2_iter1_reg, output_r_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln129_reg_247_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln129_reg_247 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            output_r_TDATA_blk_n <= output_r_TREADY_int;
        else 
            output_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_r_TVALID <= regslice_both_output_data_V_U_vld_out;

    output_r_TVALID_int_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln129_reg_247, ap_block_pp2_stage0_11001)
    begin
        if (((icmp_ln129_reg_247 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            output_r_TVALID_int <= ap_const_logic_1;
        else 
            output_r_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln107_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_131),64));
    zext_ln136_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i1_reg_153),64));
end behav;
