// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module QIO_accel_hw_int_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        init_val_address0,
        init_val_ce0,
        init_val_q0,
        coef_list_0_address0,
        coef_list_0_ce0,
        coef_list_0_q0,
        coef_list_0_address1,
        coef_list_0_ce1,
        coef_list_0_q1,
        coef_list_1_address0,
        coef_list_1_ce0,
        coef_list_1_q0,
        coef_list_1_address1,
        coef_list_1_ce1,
        coef_list_1_q1,
        seed,
        final_val_address0,
        final_val_ce0,
        final_val_we0,
        final_val_d0
);

parameter    ap_ST_fsm_state1 = 131'd1;
parameter    ap_ST_fsm_pp0_stage0 = 131'd2;
parameter    ap_ST_fsm_state4 = 131'd4;
parameter    ap_ST_fsm_state5 = 131'd8;
parameter    ap_ST_fsm_state6 = 131'd16;
parameter    ap_ST_fsm_state7 = 131'd32;
parameter    ap_ST_fsm_state8 = 131'd64;
parameter    ap_ST_fsm_state9 = 131'd128;
parameter    ap_ST_fsm_state10 = 131'd256;
parameter    ap_ST_fsm_state11 = 131'd512;
parameter    ap_ST_fsm_state12 = 131'd1024;
parameter    ap_ST_fsm_state13 = 131'd2048;
parameter    ap_ST_fsm_state14 = 131'd4096;
parameter    ap_ST_fsm_state15 = 131'd8192;
parameter    ap_ST_fsm_state16 = 131'd16384;
parameter    ap_ST_fsm_state17 = 131'd32768;
parameter    ap_ST_fsm_state18 = 131'd65536;
parameter    ap_ST_fsm_state19 = 131'd131072;
parameter    ap_ST_fsm_state20 = 131'd262144;
parameter    ap_ST_fsm_state21 = 131'd524288;
parameter    ap_ST_fsm_state22 = 131'd1048576;
parameter    ap_ST_fsm_state23 = 131'd2097152;
parameter    ap_ST_fsm_state24 = 131'd4194304;
parameter    ap_ST_fsm_state25 = 131'd8388608;
parameter    ap_ST_fsm_state26 = 131'd16777216;
parameter    ap_ST_fsm_state27 = 131'd33554432;
parameter    ap_ST_fsm_state28 = 131'd67108864;
parameter    ap_ST_fsm_state29 = 131'd134217728;
parameter    ap_ST_fsm_state30 = 131'd268435456;
parameter    ap_ST_fsm_state31 = 131'd536870912;
parameter    ap_ST_fsm_state32 = 131'd1073741824;
parameter    ap_ST_fsm_state33 = 131'd2147483648;
parameter    ap_ST_fsm_state34 = 131'd4294967296;
parameter    ap_ST_fsm_state35 = 131'd8589934592;
parameter    ap_ST_fsm_state36 = 131'd17179869184;
parameter    ap_ST_fsm_state37 = 131'd34359738368;
parameter    ap_ST_fsm_state38 = 131'd68719476736;
parameter    ap_ST_fsm_state39 = 131'd137438953472;
parameter    ap_ST_fsm_state40 = 131'd274877906944;
parameter    ap_ST_fsm_state41 = 131'd549755813888;
parameter    ap_ST_fsm_state42 = 131'd1099511627776;
parameter    ap_ST_fsm_state43 = 131'd2199023255552;
parameter    ap_ST_fsm_state44 = 131'd4398046511104;
parameter    ap_ST_fsm_state45 = 131'd8796093022208;
parameter    ap_ST_fsm_state46 = 131'd17592186044416;
parameter    ap_ST_fsm_state47 = 131'd35184372088832;
parameter    ap_ST_fsm_state48 = 131'd70368744177664;
parameter    ap_ST_fsm_state49 = 131'd140737488355328;
parameter    ap_ST_fsm_state50 = 131'd281474976710656;
parameter    ap_ST_fsm_state51 = 131'd562949953421312;
parameter    ap_ST_fsm_state52 = 131'd1125899906842624;
parameter    ap_ST_fsm_state53 = 131'd2251799813685248;
parameter    ap_ST_fsm_state54 = 131'd4503599627370496;
parameter    ap_ST_fsm_state55 = 131'd9007199254740992;
parameter    ap_ST_fsm_state56 = 131'd18014398509481984;
parameter    ap_ST_fsm_state57 = 131'd36028797018963968;
parameter    ap_ST_fsm_state58 = 131'd72057594037927936;
parameter    ap_ST_fsm_state59 = 131'd144115188075855872;
parameter    ap_ST_fsm_state60 = 131'd288230376151711744;
parameter    ap_ST_fsm_state61 = 131'd576460752303423488;
parameter    ap_ST_fsm_state62 = 131'd1152921504606846976;
parameter    ap_ST_fsm_state63 = 131'd2305843009213693952;
parameter    ap_ST_fsm_state64 = 131'd4611686018427387904;
parameter    ap_ST_fsm_state65 = 131'd9223372036854775808;
parameter    ap_ST_fsm_state66 = 131'd18446744073709551616;
parameter    ap_ST_fsm_state67 = 131'd36893488147419103232;
parameter    ap_ST_fsm_state68 = 131'd73786976294838206464;
parameter    ap_ST_fsm_state69 = 131'd147573952589676412928;
parameter    ap_ST_fsm_state70 = 131'd295147905179352825856;
parameter    ap_ST_fsm_state71 = 131'd590295810358705651712;
parameter    ap_ST_fsm_state72 = 131'd1180591620717411303424;
parameter    ap_ST_fsm_state73 = 131'd2361183241434822606848;
parameter    ap_ST_fsm_state74 = 131'd4722366482869645213696;
parameter    ap_ST_fsm_state75 = 131'd9444732965739290427392;
parameter    ap_ST_fsm_state76 = 131'd18889465931478580854784;
parameter    ap_ST_fsm_state77 = 131'd37778931862957161709568;
parameter    ap_ST_fsm_state78 = 131'd75557863725914323419136;
parameter    ap_ST_fsm_state79 = 131'd151115727451828646838272;
parameter    ap_ST_fsm_state80 = 131'd302231454903657293676544;
parameter    ap_ST_fsm_state81 = 131'd604462909807314587353088;
parameter    ap_ST_fsm_state82 = 131'd1208925819614629174706176;
parameter    ap_ST_fsm_state83 = 131'd2417851639229258349412352;
parameter    ap_ST_fsm_state84 = 131'd4835703278458516698824704;
parameter    ap_ST_fsm_state85 = 131'd9671406556917033397649408;
parameter    ap_ST_fsm_state86 = 131'd19342813113834066795298816;
parameter    ap_ST_fsm_state87 = 131'd38685626227668133590597632;
parameter    ap_ST_fsm_state88 = 131'd77371252455336267181195264;
parameter    ap_ST_fsm_state89 = 131'd154742504910672534362390528;
parameter    ap_ST_fsm_state90 = 131'd309485009821345068724781056;
parameter    ap_ST_fsm_state91 = 131'd618970019642690137449562112;
parameter    ap_ST_fsm_state92 = 131'd1237940039285380274899124224;
parameter    ap_ST_fsm_state93 = 131'd2475880078570760549798248448;
parameter    ap_ST_fsm_state94 = 131'd4951760157141521099596496896;
parameter    ap_ST_fsm_state95 = 131'd9903520314283042199192993792;
parameter    ap_ST_fsm_state96 = 131'd19807040628566084398385987584;
parameter    ap_ST_fsm_state97 = 131'd39614081257132168796771975168;
parameter    ap_ST_fsm_state98 = 131'd79228162514264337593543950336;
parameter    ap_ST_fsm_state99 = 131'd158456325028528675187087900672;
parameter    ap_ST_fsm_state100 = 131'd316912650057057350374175801344;
parameter    ap_ST_fsm_state101 = 131'd633825300114114700748351602688;
parameter    ap_ST_fsm_state102 = 131'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state103 = 131'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state104 = 131'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state105 = 131'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state106 = 131'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state107 = 131'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state108 = 131'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state109 = 131'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state110 = 131'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state111 = 131'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state112 = 131'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state113 = 131'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state114 = 131'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state115 = 131'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state116 = 131'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state117 = 131'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state118 = 131'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state119 = 131'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state120 = 131'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state121 = 131'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state122 = 131'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state123 = 131'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state124 = 131'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state125 = 131'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state126 = 131'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state127 = 131'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state128 = 131'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state129 = 131'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state130 = 131'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_pp1_stage0 = 131'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state133 = 131'd1361129467683753853853498429727072845824;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] init_val_address0;
output   init_val_ce0;
input  [31:0] init_val_q0;
output  [14:0] coef_list_0_address0;
output   coef_list_0_ce0;
input  [31:0] coef_list_0_q0;
output  [14:0] coef_list_0_address1;
output   coef_list_0_ce1;
input  [31:0] coef_list_0_q1;
output  [14:0] coef_list_1_address0;
output   coef_list_1_ce0;
input  [31:0] coef_list_1_q0;
output  [14:0] coef_list_1_address1;
output   coef_list_1_ce1;
input  [31:0] coef_list_1_q1;
input  [31:0] seed;
output  [7:0] final_val_address0;
output   final_val_ce0;
output   final_val_we0;
output  [31:0] final_val_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg init_val_ce0;
reg coef_list_0_ce0;
reg coef_list_0_ce1;
reg coef_list_1_ce0;
reg coef_list_1_ce1;
reg final_val_ce0;
reg final_val_we0;

(* fsm_encoding = "none" *) reg   [130:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] i_0_reg_386;
reg   [8:0] i4_0_reg_465;
wire   [31:0] grp_Galois_LFSR_32_33_hw_fu_477_ap_return;
reg   [31:0] reg_546;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state88;
wire   [63:0] grp_fu_540_p1;
reg   [63:0] reg_553;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state94;
wire   [31:0] grp_fu_493_p2;
reg   [31:0] reg_559;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state77;
wire   [31:0] grp_fu_497_p2;
reg   [31:0] reg_565;
wire   [31:0] rnd_input_fu_571_p2;
reg   [31:0] rnd_input_reg_1357;
wire   [0:0] icmp_ln17_fu_577_p2;
reg   [0:0] icmp_ln17_reg_1362;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [8:0] i_fu_583_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] zext_ln18_fu_589_p1;
reg   [63:0] zext_ln18_reg_1371;
wire   [6:0] trunc_ln18_fu_594_p1;
reg   [6:0] trunc_ln18_reg_1381;
wire   [0:0] icmp_ln18_fu_608_p2;
reg   [0:0] icmp_ln18_reg_1386;
wire   [0:0] icmp_ln22_fu_624_p2;
wire    ap_CS_fsm_state5;
wire   [13:0] i_3_fu_630_p2;
reg   [13:0] i_3_reg_1401;
reg   [31:0] rnd_out_1_reg_1406;
wire    ap_CS_fsm_state7;
reg   [31:0] rnd_out_2_reg_1412;
wire    ap_CS_fsm_state8;
reg   [63:0] tmp_6_reg_1418;
wire    ap_CS_fsm_state14;
wire   [63:0] grp_fu_543_p1;
reg   [63:0] tmp_9_reg_1423;
wire   [63:0] grp_fu_519_p2;
reg   [63:0] tmp_3_reg_1428;
wire    ap_CS_fsm_state18;
reg   [63:0] tmp_7_reg_1433;
wire    ap_CS_fsm_state20;
wire   [63:0] grp_fu_525_p2;
reg   [63:0] tmp_s_reg_1438;
reg   [10:0] tmp_V_reg_1443;
wire    ap_CS_fsm_state49;
wire   [51:0] tmp_V_1_fu_650_p1;
reg   [51:0] tmp_V_1_reg_1449;
wire   [0:0] isNeg_fu_663_p3;
reg   [0:0] isNeg_reg_1454;
wire    ap_CS_fsm_state50;
wire   [11:0] ush_fu_680_p3;
reg   [11:0] ush_reg_1459;
reg   [31:0] val_V_reg_1464;
wire    ap_CS_fsm_state51;
reg   [10:0] tmp_V_2_reg_1469;
wire   [51:0] tmp_V_3_fu_759_p1;
reg   [51:0] tmp_V_3_reg_1475;
reg   [10:0] tmp_V_4_reg_1480;
wire   [51:0] tmp_V_5_fu_777_p1;
reg   [51:0] tmp_V_5_reg_1486;
reg   [6:0] current_val_0_addr_1_reg_1491;
reg   [6:0] current_val_1_addr_1_reg_1497;
wire   [0:0] icmp_ln37_fu_807_p2;
reg   [0:0] icmp_ln37_reg_1503;
wire   [31:0] val_V_1_fu_906_p3;
reg   [31:0] val_V_1_reg_1508;
wire    ap_CS_fsm_state52;
wire   [0:0] icmp_ln36_fu_1015_p2;
reg   [0:0] icmp_ln36_reg_1514;
wire   [63:0] zext_ln37_fu_1021_p1;
reg   [63:0] zext_ln37_reg_1518;
wire   [31:0] select_ln37_fu_1024_p3;
reg   [31:0] select_ln37_reg_1525;
wire   [8:0] i_2_fu_1047_p2;
reg   [8:0] i_2_reg_1534;
wire    ap_CS_fsm_state54;
wire   [6:0] trunc_ln48_fu_1053_p1;
reg   [6:0] trunc_ln48_reg_1539;
wire   [0:0] icmp_ln47_fu_1041_p2;
wire   [0:0] icmp_ln48_fu_1073_p2;
reg   [0:0] icmp_ln48_reg_1555;
wire   [31:0] current_val_cash_fu_1079_p3;
reg   [31:0] current_val_cash_reg_1562;
wire    ap_CS_fsm_state55;
wire   [15:0] zext_ln48_1_fu_1093_p1;
reg   [15:0] zext_ln48_1_reg_1567;
wire    ap_CS_fsm_state61;
wire   [31:0] grp_fu_506_p1;
reg   [31:0] tmp_12_reg_1572;
wire    ap_CS_fsm_state62;
wire   [0:0] icmp_ln50_fu_1097_p2;
wire   [15:0] add_ln51_fu_1129_p2;
reg   [15:0] add_ln51_reg_1601;
wire    ap_CS_fsm_state63;
wire   [31:0] select_ln51_fu_1150_p3;
reg   [31:0] select_ln51_reg_1606;
wire   [7:0] empty_42_fu_1158_p1;
reg   [7:0] empty_42_reg_1611;
wire   [31:0] select_ln51_1_fu_1162_p3;
reg   [31:0] select_ln51_1_reg_1616;
wire   [8:0] add_ln50_fu_1170_p2;
reg   [8:0] add_ln50_reg_1621;
reg   [31:0] tmp_16_reg_1626;
wire    ap_CS_fsm_state69;
wire   [31:0] grp_fu_509_p1;
reg   [31:0] tmp_13_1_reg_1631;
wire    ap_CS_fsm_state72;
wire   [31:0] select_ln48_fu_1199_p3;
reg   [31:0] select_ln48_reg_1656;
wire   [31:0] select_ln48_1_fu_1206_p3;
reg   [31:0] select_ln48_1_reg_1661;
wire   [31:0] grp_fu_488_p2;
reg   [31:0] cost_new_reg_1666;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state112;
wire   [63:0] grp_fu_530_p2;
reg   [63:0] tmp_5_reg_1681;
wire    ap_CS_fsm_state125;
wire   [31:0] grp_fu_512_p1;
reg   [31:0] random_reg_1686;
wire    ap_CS_fsm_state127;
wire   [31:0] grp_fu_501_p2;
reg   [31:0] tmp_10_reg_1692;
wire   [0:0] icmp_ln58_fu_1251_p2;
reg   [0:0] icmp_ln58_reg_1698;
wire    ap_CS_fsm_state128;
wire   [0:0] icmp_ln58_1_fu_1257_p2;
reg   [0:0] icmp_ln58_1_reg_1703;
wire   [0:0] icmp_ln58_2_fu_1263_p2;
reg   [0:0] icmp_ln58_2_reg_1708;
wire   [0:0] icmp_ln58_3_fu_1269_p2;
reg   [0:0] icmp_ln58_3_reg_1713;
wire   [0:0] and_ln58_1_fu_1289_p2;
reg   [0:0] and_ln58_1_reg_1718;
wire    ap_CS_fsm_state129;
wire   [7:0] new_val_addr_3_gep_fu_350_p3;
wire   [0:0] icmp_ln64_fu_1300_p2;
reg   [0:0] icmp_ln64_reg_1727;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state131_pp1_stage0_iter0;
wire    ap_block_state132_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [8:0] i_1_fu_1306_p2;
reg   [8:0] i_1_reg_1731;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state131;
reg    ap_enable_reg_pp1_iter1;
reg   [6:0] current_val_0_address0;
reg    current_val_0_ce0;
reg    current_val_0_we0;
wire   [31:0] current_val_0_q0;
reg   [6:0] current_val_0_address1;
reg    current_val_0_ce1;
reg    current_val_0_we1;
wire   [31:0] current_val_0_q1;
reg   [6:0] current_val_1_address0;
reg    current_val_1_ce0;
reg    current_val_1_we0;
wire   [31:0] current_val_1_q0;
reg   [6:0] current_val_1_address1;
reg    current_val_1_ce1;
reg    current_val_1_we1;
wire   [31:0] current_val_1_q1;
reg   [7:0] new_val_address0;
reg    new_val_ce0;
reg    new_val_we0;
reg   [31:0] new_val_d0;
wire   [31:0] new_val_q0;
reg    grp_Galois_LFSR_32_33_hw_fu_477_ap_start;
wire    grp_Galois_LFSR_32_33_hw_fu_477_ap_done;
wire    grp_Galois_LFSR_32_33_hw_fu_477_ap_idle;
wire    grp_Galois_LFSR_32_33_hw_fu_477_ap_ready;
reg   [31:0] grp_Galois_LFSR_32_33_hw_fu_477_input_r;
reg   [31:0] rnd_input_0_reg_397;
wire    ap_CS_fsm_state130;
wire    ap_CS_fsm_state4;
reg   [13:0] i1_0_reg_407;
reg   [31:0] cost_old_reg_418;
wire    ap_CS_fsm_state53;
reg   [8:0] i3_0_reg_430;
reg   [31:0] cost_new2_1_0_reg_441;
reg   [8:0] j_0_0_reg_453;
reg   [8:0] ap_phi_mux_i4_0_phi_fu_469_p4;
wire    ap_block_pp1_stage0;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln18_1_fu_614_p1;
wire   [63:0] zext_ln37_1_fu_801_p1;
wire   [7:0] new_val_addr_1_gep_fu_243_p3;
wire   [63:0] zext_ln48_fu_1057_p1;
wire   [63:0] zext_ln51_1_fu_1107_p1;
wire   [63:0] zext_ln51_3_fu_1119_p1;
wire   [63:0] zext_ln51_2_fu_1176_p1;
wire   [63:0] zext_ln51_4_fu_1193_p1;
wire   [63:0] zext_ln66_1_fu_1316_p1;
wire   [63:0] zext_ln66_fu_1322_p1;
reg   [31:0] cost_old_1_fu_160;
wire   [31:0] sub_ln40_fu_1031_p2;
wire   [31:0] add_ln37_fu_1036_p2;
reg   [31:0] grp_fu_488_p0;
reg   [31:0] grp_fu_488_p1;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state83;
reg   [31:0] grp_fu_493_p0;
reg   [31:0] grp_fu_493_p1;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state74;
reg   [31:0] grp_fu_497_p0;
reg   [31:0] grp_fu_497_p1;
reg   [31:0] grp_fu_506_p0;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state126;
reg   [63:0] grp_fu_519_p0;
reg   [63:0] grp_fu_519_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
reg   [63:0] grp_fu_530_p0;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state95;
reg   [31:0] grp_fu_540_p0;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state89;
wire   [1:0] tmp_19_fu_598_p4;
wire   [63:0] p_Val2_s_fu_636_p1;
wire   [11:0] zext_ln502_fu_654_p1;
wire   [11:0] add_ln502_fu_657_p2;
wire   [10:0] sub_ln1311_fu_671_p2;
wire  signed [11:0] sext_ln1311_fu_676_p1;
wire   [53:0] mantissa_V_fu_688_p4;
wire  signed [31:0] sext_ln1311_1_fu_701_p1;
wire   [53:0] zext_ln1285_fu_708_p1;
wire   [53:0] r_V_fu_712_p2;
wire   [136:0] zext_ln682_fu_697_p1;
wire   [136:0] zext_ln1287_fu_704_p1;
wire   [136:0] zext_ln1287_3_fu_718_p1;
wire   [136:0] r_V_1_fu_722_p2;
wire   [136:0] r_V_7_fu_728_p3;
wire   [63:0] p_Val2_5_fu_745_p1;
wire   [63:0] grp_fu_535_p2;
wire   [63:0] p_Val2_9_fu_763_p1;
wire   [6:0] trunc_ln1_fu_791_p4;
wire   [24:0] trunc_ln37_1_fu_781_p4;
wire   [53:0] mantissa_V_1_fu_813_p4;
wire   [11:0] zext_ln502_1_fu_826_p1;
wire   [11:0] add_ln502_1_fu_829_p2;
wire   [10:0] sub_ln1311_1_fu_843_p2;
wire   [0:0] isNeg_1_fu_835_p3;
wire  signed [11:0] sext_ln1311_2_fu_848_p1;
wire   [11:0] ush_1_fu_852_p3;
wire  signed [31:0] sext_ln1311_3_fu_860_p1;
wire   [53:0] zext_ln1285_1_fu_868_p1;
wire   [136:0] zext_ln682_1_fu_822_p1;
wire   [136:0] zext_ln1287_1_fu_864_p1;
wire   [53:0] r_V_3_fu_872_p2;
wire   [0:0] tmp_24_fu_884_p3;
wire   [136:0] r_V_4_fu_878_p2;
wire   [31:0] zext_ln662_fu_892_p1;
wire   [31:0] tmp_20_fu_896_p4;
wire   [53:0] mantissa_V_2_fu_914_p4;
wire   [11:0] zext_ln502_2_fu_927_p1;
wire   [11:0] add_ln502_2_fu_930_p2;
wire   [10:0] sub_ln1311_2_fu_944_p2;
wire   [0:0] isNeg_2_fu_936_p3;
wire  signed [11:0] sext_ln1311_4_fu_949_p1;
wire   [11:0] ush_2_fu_953_p3;
wire  signed [31:0] sext_ln1311_5_fu_961_p1;
wire   [53:0] zext_ln1285_2_fu_969_p1;
wire   [136:0] zext_ln682_2_fu_923_p1;
wire   [136:0] zext_ln1287_2_fu_965_p1;
wire   [53:0] r_V_5_fu_973_p2;
wire   [0:0] tmp_28_fu_985_p3;
wire   [136:0] r_V_6_fu_979_p2;
wire   [31:0] zext_ln662_1_fu_993_p1;
wire   [31:0] tmp_21_fu_997_p4;
wire   [31:0] val_V_2_fu_1007_p3;
wire   [1:0] tmp_30_fu_1063_p4;
wire   [14:0] tmp_22_fu_1086_p3;
wire   [6:0] trunc_ln51_fu_1103_p1;
wire   [6:0] or_ln51_fu_1113_p2;
wire   [15:0] zext_ln51_fu_1125_p1;
wire   [1:0] tmp_31_fu_1134_p4;
wire   [0:0] icmp_ln51_fu_1144_p2;
wire   [7:0] or_ln50_fu_1181_p2;
wire   [14:0] tmp_23_fu_1186_p3;
wire   [31:0] bitcast_ln58_fu_1217_p1;
wire   [31:0] bitcast_ln58_1_fu_1234_p1;
wire   [7:0] tmp_11_fu_1220_p4;
wire   [22:0] trunc_ln58_fu_1230_p1;
wire   [7:0] tmp_13_fu_1237_p4;
wire   [22:0] trunc_ln58_1_fu_1247_p1;
wire   [0:0] or_ln58_fu_1275_p2;
wire   [0:0] or_ln58_1_fu_1279_p2;
wire   [0:0] and_ln58_fu_1283_p2;
wire   [0:0] grp_fu_515_p2;
wire   [6:0] trunc_ln66_fu_1312_p1;
wire   [1:0] tmp_29_fu_1327_p4;
wire   [0:0] icmp_ln66_fu_1337_p2;
wire    ap_CS_fsm_state133;
reg   [130:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 131'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

QIO_accel_hw_int_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
current_val_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(current_val_0_address0),
    .ce0(current_val_0_ce0),
    .we0(current_val_0_we0),
    .d0(init_val_q0),
    .q0(current_val_0_q0),
    .address1(current_val_0_address1),
    .ce1(current_val_0_ce1),
    .we1(current_val_0_we1),
    .d1(new_val_q0),
    .q1(current_val_0_q1)
);

QIO_accel_hw_int_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
current_val_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(current_val_1_address0),
    .ce0(current_val_1_ce0),
    .we0(current_val_1_we0),
    .d0(init_val_q0),
    .q0(current_val_1_q0),
    .address1(current_val_1_address1),
    .ce1(current_val_1_ce1),
    .we1(current_val_1_we1),
    .d1(new_val_q0),
    .q1(current_val_1_q1)
);

QIO_accel_hw_int_dEe #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
new_val_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(new_val_address0),
    .ce0(new_val_ce0),
    .we0(new_val_we0),
    .d0(new_val_d0),
    .q0(new_val_q0)
);

Galois_LFSR_32_33_hw grp_Galois_LFSR_32_33_hw_fu_477(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Galois_LFSR_32_33_hw_fu_477_ap_start),
    .ap_done(grp_Galois_LFSR_32_33_hw_fu_477_ap_done),
    .ap_idle(grp_Galois_LFSR_32_33_hw_fu_477_ap_idle),
    .ap_ready(grp_Galois_LFSR_32_33_hw_fu_477_ap_ready),
    .input_r(grp_Galois_LFSR_32_33_hw_fu_477_input_r),
    .seed_V(seed),
    .ap_return(grp_Galois_LFSR_32_33_hw_fu_477_ap_return)
);

QIO_accel_fadd_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
QIO_accel_fadd_32eOg_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_488_p0),
    .din1(grp_fu_488_p1),
    .ce(1'b1),
    .dout(grp_fu_488_p2)
);

QIO_accel_fmul_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
QIO_accel_fmul_32fYi_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_493_p0),
    .din1(grp_fu_493_p1),
    .ce(1'b1),
    .dout(grp_fu_493_p2)
);

QIO_accel_fmul_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
QIO_accel_fmul_32fYi_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_497_p0),
    .din1(grp_fu_497_p1),
    .ce(1'b1),
    .dout(grp_fu_497_p2)
);

QIO_accel_fdiv_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
QIO_accel_fdiv_32g8j_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(cost_old_reg_418),
    .din1(cost_old_1_fu_160),
    .ce(1'b1),
    .dout(grp_fu_501_p2)
);

QIO_accel_sitofp_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
QIO_accel_sitofp_hbi_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_506_p0),
    .ce(1'b1),
    .dout(grp_fu_506_p1)
);

QIO_accel_sitofp_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
QIO_accel_sitofp_hbi_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln51_1_reg_1616),
    .ce(1'b1),
    .dout(grp_fu_509_p1)
);

QIO_accel_fptruncibs #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
QIO_accel_fptruncibs_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_5_reg_1681),
    .ce(1'b1),
    .dout(grp_fu_512_p1)
);

QIO_accel_fcmp_32jbC #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
QIO_accel_fcmp_32jbC_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(random_reg_1686),
    .din1(tmp_10_reg_1692),
    .ce(1'b1),
    .opcode(5'd5),
    .dout(grp_fu_515_p2)
);

QIO_accel_dmul_64kbM #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
QIO_accel_dmul_64kbM_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_519_p0),
    .din1(grp_fu_519_p1),
    .ce(1'b1),
    .dout(grp_fu_519_p2)
);

QIO_accel_dmul_64kbM #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
QIO_accel_dmul_64kbM_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_9_reg_1423),
    .din1(64'd4611686018427387904),
    .ce(1'b1),
    .dout(grp_fu_525_p2)
);

QIO_accel_ddiv_64lbW #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
QIO_accel_ddiv_64lbW_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_530_p0),
    .din1(64'd4751297606873776128),
    .ce(1'b1),
    .dout(grp_fu_530_p2)
);

QIO_accel_ddiv_64lbW #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
QIO_accel_ddiv_64lbW_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_s_reg_1438),
    .din1(64'd4751297606873776128),
    .ce(1'b1),
    .dout(grp_fu_535_p2)
);

QIO_accel_uitodp_mb6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
QIO_accel_uitodp_mb6_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_540_p0),
    .ce(1'b1),
    .dout(grp_fu_540_p1)
);

QIO_accel_uitodp_mb6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
QIO_accel_uitodp_mb6_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(rnd_out_2_reg_1412),
    .ce(1'b1),
    .dout(grp_fu_543_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state131) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln22_fu_624_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state131))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state131);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((icmp_ln22_fu_624_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        cost_new2_1_0_reg_441 <= grp_fu_488_p2;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        cost_new2_1_0_reg_441 <= cost_old_reg_418;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln58_1_reg_1718) & (1'b1 == ap_CS_fsm_state130))) begin
        cost_old_1_fu_160 <= cost_old_reg_418;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        cost_old_1_fu_160 <= 32'd1315859240;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_1097_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state62))) begin
        cost_old_reg_418 <= cost_new2_1_0_reg_441;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        cost_old_reg_418 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i1_0_reg_407 <= 14'd0;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        i1_0_reg_407 <= i_3_reg_1401;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_1097_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state62))) begin
        i3_0_reg_430 <= i_2_reg_1534;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        i3_0_reg_430 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_624_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i4_0_reg_465 <= 9'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln64_reg_1727 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i4_0_reg_465 <= i_1_reg_1731;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln17_fu_577_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_386 <= i_fu_583_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_386 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        j_0_0_reg_453 <= add_ln50_reg_1621;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        j_0_0_reg_453 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        rnd_input_0_reg_397 <= rnd_input_reg_1357;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        rnd_input_0_reg_397 <= reg_546;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        add_ln50_reg_1621 <= add_ln50_fu_1170_p2;
        add_ln51_reg_1601 <= add_ln51_fu_1129_p2;
        empty_42_reg_1611 <= empty_42_fu_1158_p1;
        select_ln51_1_reg_1616 <= select_ln51_1_fu_1162_p3;
        select_ln51_reg_1606 <= select_ln51_fu_1150_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state129)) begin
        and_ln58_1_reg_1718 <= and_ln58_1_fu_1289_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        cost_new_reg_1666 <= grp_fu_488_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        current_val_0_addr_1_reg_1491 <= zext_ln37_1_fu_801_p1;
        current_val_1_addr_1_reg_1497 <= zext_ln37_1_fu_801_p1;
        icmp_ln37_reg_1503 <= icmp_ln37_fu_807_p2;
        tmp_V_2_reg_1469 <= {{p_Val2_5_fu_745_p1[62:52]}};
        tmp_V_3_reg_1475 <= tmp_V_3_fu_759_p1;
        tmp_V_4_reg_1480 <= {{p_Val2_9_fu_763_p1[62:52]}};
        tmp_V_5_reg_1486 <= tmp_V_5_fu_777_p1;
        val_V_reg_1464 <= {{r_V_7_fu_728_p3[84:53]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        current_val_cash_reg_1562 <= current_val_cash_fu_1079_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_1_reg_1731 <= i_1_fu_1306_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        i_2_reg_1534 <= i_2_fu_1047_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_3_reg_1401 <= i_3_fu_630_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln17_reg_1362 <= icmp_ln17_fu_577_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln17_fu_577_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln18_reg_1386 <= icmp_ln18_fu_608_p2;
        trunc_ln18_reg_1381 <= trunc_ln18_fu_594_p1;
        zext_ln18_reg_1371[8 : 0] <= zext_ln18_fu_589_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        icmp_ln36_reg_1514 <= icmp_ln36_fu_1015_p2;
        select_ln37_reg_1525 <= select_ln37_fu_1024_p3;
        val_V_1_reg_1508 <= val_V_1_fu_906_p3;
        zext_ln37_reg_1518[31 : 0] <= zext_ln37_fu_1021_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln47_fu_1041_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state54))) begin
        icmp_ln48_reg_1555 <= icmp_ln48_fu_1073_p2;
        trunc_ln48_reg_1539 <= trunc_ln48_fu_1053_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state128)) begin
        icmp_ln58_1_reg_1703 <= icmp_ln58_1_fu_1257_p2;
        icmp_ln58_2_reg_1708 <= icmp_ln58_2_fu_1263_p2;
        icmp_ln58_3_reg_1713 <= icmp_ln58_3_fu_1269_p2;
        icmp_ln58_reg_1698 <= icmp_ln58_fu_1251_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln64_reg_1727 <= icmp_ln64_fu_1300_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        isNeg_reg_1454 <= add_ln502_fu_657_p2[32'd11];
        ush_reg_1459 <= ush_fu_680_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state127)) begin
        random_reg_1686 <= grp_fu_512_p1;
        tmp_10_reg_1692 <= grp_fu_501_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_546 <= grp_Galois_LFSR_32_33_hw_fu_477_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_553 <= grp_fu_540_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state73))) begin
        reg_559 <= grp_fu_493_p2;
        reg_565 <= grp_fu_497_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rnd_input_reg_1357[31 : 14] <= rnd_input_fu_571_p2[31 : 14];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        rnd_out_1_reg_1406 <= grp_Galois_LFSR_32_33_hw_fu_477_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        rnd_out_2_reg_1412 <= grp_Galois_LFSR_32_33_hw_fu_477_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        select_ln48_1_reg_1661 <= select_ln48_1_fu_1206_p3;
        select_ln48_reg_1656 <= select_ln48_fu_1199_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        tmp_12_reg_1572 <= grp_fu_506_p1;
        zext_ln48_1_reg_1567[14 : 8] <= zext_ln48_1_fu_1093_p1[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        tmp_13_1_reg_1631 <= grp_fu_509_p1;
        tmp_16_reg_1626 <= grp_fu_506_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_3_reg_1428 <= grp_fu_519_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state125)) begin
        tmp_5_reg_1681 <= grp_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_6_reg_1418 <= grp_fu_540_p1;
        tmp_9_reg_1423 <= grp_fu_543_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_7_reg_1433 <= grp_fu_519_p2;
        tmp_s_reg_1438 <= grp_fu_525_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        tmp_V_1_reg_1449 <= tmp_V_1_fu_650_p1;
        tmp_V_reg_1443 <= {{p_Val2_s_fu_636_p1[62:52]}};
    end
end

always @ (*) begin
    if ((icmp_ln17_fu_577_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln64_fu_1300_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state131 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state131 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state133) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln64_reg_1727 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_i4_0_phi_fu_469_p4 = i_1_reg_1731;
    end else begin
        ap_phi_mux_i4_0_phi_fu_469_p4 = i4_0_reg_465;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state133)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        coef_list_0_ce0 = 1'b1;
    end else begin
        coef_list_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        coef_list_0_ce1 = 1'b1;
    end else begin
        coef_list_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        coef_list_1_ce0 = 1'b1;
    end else begin
        coef_list_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        coef_list_1_ce1 = 1'b1;
    end else begin
        coef_list_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        current_val_0_address0 = zext_ln51_1_fu_1107_p1;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        current_val_0_address0 = zext_ln48_fu_1057_p1;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        current_val_0_address0 = zext_ln37_1_fu_801_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_val_0_address0 = zext_ln18_1_fu_614_p1;
    end else begin
        current_val_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        current_val_0_address1 = zext_ln66_1_fu_1316_p1;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        current_val_0_address1 = current_val_0_addr_1_reg_1491;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        current_val_0_address1 = zext_ln51_3_fu_1119_p1;
    end else begin
        current_val_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state51) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        current_val_0_ce0 = 1'b1;
    end else begin
        current_val_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state62) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        current_val_0_ce1 = 1'b1;
    end else begin
        current_val_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_1386 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_val_0_we0 = 1'b1;
    end else begin
        current_val_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln58_1_reg_1718) & (icmp_ln37_reg_1503 == 1'd1) & (1'b1 == ap_CS_fsm_state130))) begin
        current_val_0_we1 = 1'b1;
    end else begin
        current_val_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        current_val_1_address0 = zext_ln51_1_fu_1107_p1;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        current_val_1_address0 = zext_ln48_fu_1057_p1;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        current_val_1_address0 = zext_ln37_1_fu_801_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_val_1_address0 = zext_ln18_1_fu_614_p1;
    end else begin
        current_val_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        current_val_1_address1 = zext_ln66_1_fu_1316_p1;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        current_val_1_address1 = current_val_1_addr_1_reg_1497;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        current_val_1_address1 = zext_ln51_3_fu_1119_p1;
    end else begin
        current_val_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state51) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        current_val_1_ce0 = 1'b1;
    end else begin
        current_val_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state62) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        current_val_1_ce1 = 1'b1;
    end else begin
        current_val_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_1386 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_val_1_we0 = 1'b1;
    end else begin
        current_val_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln58_1_reg_1718) & (icmp_ln37_reg_1503 == 1'd0) & (1'b1 == ap_CS_fsm_state130))) begin
        current_val_1_we1 = 1'b1;
    end else begin
        current_val_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        final_val_ce0 = 1'b1;
    end else begin
        final_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln64_reg_1727 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        final_val_we0 = 1'b1;
    end else begin
        final_val_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_Galois_LFSR_32_33_hw_fu_477_ap_start = 1'b1;
    end else begin
        grp_Galois_LFSR_32_33_hw_fu_477_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        grp_Galois_LFSR_32_33_hw_fu_477_input_r = rnd_out_2_reg_1412;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_Galois_LFSR_32_33_hw_fu_477_input_r = rnd_out_1_reg_1406;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_Galois_LFSR_32_33_hw_fu_477_input_r = reg_546;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_Galois_LFSR_32_33_hw_fu_477_input_r = rnd_input_0_reg_397;
    end else begin
        grp_Galois_LFSR_32_33_hw_fu_477_input_r = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        grp_fu_488_p0 = cost_new_reg_1666;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_488_p0 = cost_new2_1_0_reg_441;
    end else begin
        grp_fu_488_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        grp_fu_488_p1 = reg_565;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_488_p1 = reg_559;
    end else begin
        grp_fu_488_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_493_p0 = reg_559;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        grp_fu_493_p0 = tmp_12_reg_1572;
    end else begin
        grp_fu_493_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_493_p1 = select_ln48_reg_1656;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        grp_fu_493_p1 = tmp_16_reg_1626;
    end else begin
        grp_fu_493_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_497_p0 = reg_565;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        grp_fu_497_p0 = tmp_12_reg_1572;
    end else begin
        grp_fu_497_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_497_p1 = select_ln48_1_reg_1661;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        grp_fu_497_p1 = tmp_13_1_reg_1631;
    end else begin
        grp_fu_497_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        grp_fu_506_p0 = select_ln51_reg_1606;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        grp_fu_506_p0 = current_val_cash_reg_1562;
    end else begin
        grp_fu_506_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_519_p0 = tmp_6_reg_1418;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_519_p0 = reg_553;
    end else begin
        grp_fu_519_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_519_p1 = 64'd4617315517961601024;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_519_p1 = 64'd4643211215818981376;
    end else begin
        grp_fu_519_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        grp_fu_530_p0 = reg_553;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_530_p0 = tmp_7_reg_1433;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_530_p0 = tmp_3_reg_1428;
    end else begin
        grp_fu_530_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_540_p0 = rnd_out_1_reg_1406;
    end else if (((1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_540_p0 = reg_546;
    end else begin
        grp_fu_540_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        init_val_ce0 = 1'b1;
    end else begin
        init_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state129)) begin
        new_val_address0 = new_val_addr_3_gep_fu_350_p3;
    end else if (((icmp_ln36_reg_1514 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
        new_val_address0 = new_val_addr_1_gep_fu_243_p3;
    end else if (((icmp_ln36_reg_1514 == 1'd0) & (1'b1 == ap_CS_fsm_state53))) begin
        new_val_address0 = zext_ln37_reg_1518;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        new_val_address0 = zext_ln18_reg_1371;
    end else begin
        new_val_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state129) | ((icmp_ln36_reg_1514 == 1'd1) & (1'b1 == ap_CS_fsm_state53)) | ((icmp_ln36_reg_1514 == 1'd0) & (1'b1 == ap_CS_fsm_state53)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        new_val_ce0 = 1'b1;
    end else begin
        new_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_reg_1514 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
        new_val_d0 = add_ln37_fu_1036_p2;
    end else if (((icmp_ln36_reg_1514 == 1'd0) & (1'b1 == ap_CS_fsm_state53))) begin
        new_val_d0 = sub_ln40_fu_1031_p2;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        new_val_d0 = init_val_q0;
    end else begin
        new_val_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln36_reg_1514 == 1'd1) & (1'b1 == ap_CS_fsm_state53)) | ((icmp_ln36_reg_1514 == 1'd0) & (1'b1 == ap_CS_fsm_state53)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln17_reg_1362 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        new_val_we0 = 1'b1;
    end else begin
        new_val_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln17_fu_577_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln17_fu_577_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln22_fu_624_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            if (((icmp_ln47_fu_1041_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state54))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            if (((icmp_ln50_fu_1097_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state62))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln64_fu_1300_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln64_fu_1300_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state133;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln37_fu_1036_p2 = (select_ln37_reg_1525 + val_V_1_reg_1508);

assign add_ln502_1_fu_829_p2 = ($signed(12'd3073) + $signed(zext_ln502_1_fu_826_p1));

assign add_ln502_2_fu_930_p2 = ($signed(12'd3073) + $signed(zext_ln502_2_fu_927_p1));

assign add_ln502_fu_657_p2 = ($signed(12'd3073) + $signed(zext_ln502_fu_654_p1));

assign add_ln50_fu_1170_p2 = (9'd2 + j_0_0_reg_453);

assign add_ln51_fu_1129_p2 = (zext_ln51_fu_1125_p1 + zext_ln48_1_reg_1567);

assign and_ln58_1_fu_1289_p2 = (grp_fu_515_p2 & and_ln58_fu_1283_p2);

assign and_ln58_fu_1283_p2 = (or_ln58_fu_1275_p2 & or_ln58_1_fu_1279_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd129];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd123];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd124];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state128 = ap_CS_fsm[32'd126];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd127];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd128];

assign ap_CS_fsm_state133 = ap_CS_fsm[32'd130];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd93];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state131_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state132_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign bitcast_ln58_1_fu_1234_p1 = tmp_10_reg_1692;

assign bitcast_ln58_fu_1217_p1 = random_reg_1686;

assign coef_list_0_address0 = zext_ln51_2_fu_1176_p1;

assign coef_list_0_address1 = zext_ln51_4_fu_1193_p1;

assign coef_list_1_address0 = zext_ln51_2_fu_1176_p1;

assign coef_list_1_address1 = zext_ln51_4_fu_1193_p1;

assign current_val_cash_fu_1079_p3 = ((icmp_ln48_reg_1555[0:0] === 1'b1) ? current_val_0_q0 : current_val_1_q0);

assign empty_42_fu_1158_p1 = j_0_0_reg_453[7:0];

assign final_val_address0 = zext_ln66_fu_1322_p1;

assign final_val_d0 = ((icmp_ln66_fu_1337_p2[0:0] === 1'b1) ? current_val_0_q1 : current_val_1_q1);

assign i_1_fu_1306_p2 = (ap_phi_mux_i4_0_phi_fu_469_p4 + 9'd1);

assign i_2_fu_1047_p2 = (i3_0_reg_430 + 9'd1);

assign i_3_fu_630_p2 = (i1_0_reg_407 + 14'd1);

assign i_fu_583_p2 = (i_0_reg_386 + 9'd1);

assign icmp_ln17_fu_577_p2 = ((i_0_reg_386 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_608_p2 = ((tmp_19_fu_598_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_624_p2 = ((i1_0_reg_407 == 14'd10000) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_1015_p2 = ((val_V_2_fu_1007_p3 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_807_p2 = ((trunc_ln37_1_fu_781_p4 == 25'd0) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_1041_p2 = ((i3_0_reg_430 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_1073_p2 = ((tmp_30_fu_1063_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_1097_p2 = ((j_0_0_reg_453 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_1144_p2 = ((tmp_31_fu_1134_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln58_1_fu_1257_p2 = ((trunc_ln58_fu_1230_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln58_2_fu_1263_p2 = ((tmp_13_fu_1237_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln58_3_fu_1269_p2 = ((trunc_ln58_1_fu_1247_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_1251_p2 = ((tmp_11_fu_1220_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_1300_p2 = ((ap_phi_mux_i4_0_phi_fu_469_p4 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_1337_p2 = ((tmp_29_fu_1327_p4 == 2'd0) ? 1'b1 : 1'b0);

assign init_val_address0 = zext_ln18_fu_589_p1;

assign isNeg_1_fu_835_p3 = add_ln502_1_fu_829_p2[32'd11];

assign isNeg_2_fu_936_p3 = add_ln502_2_fu_930_p2[32'd11];

assign isNeg_fu_663_p3 = add_ln502_fu_657_p2[32'd11];

assign mantissa_V_1_fu_813_p4 = {{{{1'd1}, {tmp_V_3_reg_1475}}}, {1'd0}};

assign mantissa_V_2_fu_914_p4 = {{{{1'd1}, {tmp_V_5_reg_1486}}}, {1'd0}};

assign mantissa_V_fu_688_p4 = {{{{1'd1}, {tmp_V_1_reg_1449}}}, {1'd0}};

assign new_val_addr_1_gep_fu_243_p3 = zext_ln37_reg_1518;

assign new_val_addr_3_gep_fu_350_p3 = zext_ln37_reg_1518;

assign or_ln50_fu_1181_p2 = (empty_42_reg_1611 | 8'd1);

assign or_ln51_fu_1113_p2 = (trunc_ln51_fu_1103_p1 | 7'd1);

assign or_ln58_1_fu_1279_p2 = (icmp_ln58_3_reg_1713 | icmp_ln58_2_reg_1708);

assign or_ln58_fu_1275_p2 = (icmp_ln58_reg_1698 | icmp_ln58_1_reg_1703);

assign p_Val2_5_fu_745_p1 = grp_fu_530_p2;

assign p_Val2_9_fu_763_p1 = grp_fu_535_p2;

assign p_Val2_s_fu_636_p1 = grp_fu_530_p2;

assign r_V_1_fu_722_p2 = zext_ln682_fu_697_p1 << zext_ln1287_fu_704_p1;

assign r_V_3_fu_872_p2 = mantissa_V_1_fu_813_p4 >> zext_ln1285_1_fu_868_p1;

assign r_V_4_fu_878_p2 = zext_ln682_1_fu_822_p1 << zext_ln1287_1_fu_864_p1;

assign r_V_5_fu_973_p2 = mantissa_V_2_fu_914_p4 >> zext_ln1285_2_fu_969_p1;

assign r_V_6_fu_979_p2 = zext_ln682_2_fu_923_p1 << zext_ln1287_2_fu_965_p1;

assign r_V_7_fu_728_p3 = ((isNeg_reg_1454[0:0] === 1'b1) ? zext_ln1287_3_fu_718_p1 : r_V_1_fu_722_p2);

assign r_V_fu_712_p2 = mantissa_V_fu_688_p4 >> zext_ln1285_fu_708_p1;

assign rnd_input_fu_571_p2 = seed << 32'd14;

assign select_ln37_fu_1024_p3 = ((icmp_ln37_reg_1503[0:0] === 1'b1) ? current_val_0_q0 : current_val_1_q0);

assign select_ln48_1_fu_1206_p3 = ((icmp_ln48_reg_1555[0:0] === 1'b1) ? coef_list_0_q1 : coef_list_1_q1);

assign select_ln48_fu_1199_p3 = ((icmp_ln48_reg_1555[0:0] === 1'b1) ? coef_list_0_q0 : coef_list_1_q0);

assign select_ln51_1_fu_1162_p3 = ((icmp_ln51_fu_1144_p2[0:0] === 1'b1) ? current_val_0_q1 : current_val_1_q1);

assign select_ln51_fu_1150_p3 = ((icmp_ln51_fu_1144_p2[0:0] === 1'b1) ? current_val_0_q0 : current_val_1_q0);

assign sext_ln1311_1_fu_701_p1 = $signed(ush_reg_1459);

assign sext_ln1311_2_fu_848_p1 = $signed(sub_ln1311_1_fu_843_p2);

assign sext_ln1311_3_fu_860_p1 = $signed(ush_1_fu_852_p3);

assign sext_ln1311_4_fu_949_p1 = $signed(sub_ln1311_2_fu_944_p2);

assign sext_ln1311_5_fu_961_p1 = $signed(ush_2_fu_953_p3);

assign sext_ln1311_fu_676_p1 = $signed(sub_ln1311_fu_671_p2);

assign sub_ln1311_1_fu_843_p2 = (11'd1023 - tmp_V_2_reg_1469);

assign sub_ln1311_2_fu_944_p2 = (11'd1023 - tmp_V_4_reg_1480);

assign sub_ln1311_fu_671_p2 = (11'd1023 - tmp_V_reg_1443);

assign sub_ln40_fu_1031_p2 = (select_ln37_reg_1525 - val_V_1_reg_1508);

assign tmp_11_fu_1220_p4 = {{bitcast_ln58_fu_1217_p1[30:23]}};

assign tmp_13_fu_1237_p4 = {{bitcast_ln58_1_fu_1234_p1[30:23]}};

assign tmp_19_fu_598_p4 = {{i_0_reg_386[8:7]}};

assign tmp_20_fu_896_p4 = {{r_V_4_fu_878_p2[84:53]}};

assign tmp_21_fu_997_p4 = {{r_V_6_fu_979_p2[84:53]}};

assign tmp_22_fu_1086_p3 = {{trunc_ln48_reg_1539}, {8'd0}};

assign tmp_23_fu_1186_p3 = {{trunc_ln48_reg_1539}, {or_ln50_fu_1181_p2}};

assign tmp_24_fu_884_p3 = r_V_3_fu_872_p2[32'd53];

assign tmp_28_fu_985_p3 = r_V_5_fu_973_p2[32'd53];

assign tmp_29_fu_1327_p4 = {{i4_0_reg_465[8:7]}};

assign tmp_30_fu_1063_p4 = {{i3_0_reg_430[8:7]}};

assign tmp_31_fu_1134_p4 = {{j_0_0_reg_453[8:7]}};

assign tmp_V_1_fu_650_p1 = p_Val2_s_fu_636_p1[51:0];

assign tmp_V_3_fu_759_p1 = p_Val2_5_fu_745_p1[51:0];

assign tmp_V_5_fu_777_p1 = p_Val2_9_fu_763_p1[51:0];

assign trunc_ln18_fu_594_p1 = i_0_reg_386[6:0];

assign trunc_ln1_fu_791_p4 = {{r_V_7_fu_728_p3[59:53]}};

assign trunc_ln37_1_fu_781_p4 = {{r_V_7_fu_728_p3[84:60]}};

assign trunc_ln48_fu_1053_p1 = i3_0_reg_430[6:0];

assign trunc_ln51_fu_1103_p1 = j_0_0_reg_453[6:0];

assign trunc_ln58_1_fu_1247_p1 = bitcast_ln58_1_fu_1234_p1[22:0];

assign trunc_ln58_fu_1230_p1 = bitcast_ln58_fu_1217_p1[22:0];

assign trunc_ln66_fu_1312_p1 = ap_phi_mux_i4_0_phi_fu_469_p4[6:0];

assign ush_1_fu_852_p3 = ((isNeg_1_fu_835_p3[0:0] === 1'b1) ? sext_ln1311_2_fu_848_p1 : add_ln502_1_fu_829_p2);

assign ush_2_fu_953_p3 = ((isNeg_2_fu_936_p3[0:0] === 1'b1) ? sext_ln1311_4_fu_949_p1 : add_ln502_2_fu_930_p2);

assign ush_fu_680_p3 = ((isNeg_fu_663_p3[0:0] === 1'b1) ? sext_ln1311_fu_676_p1 : add_ln502_fu_657_p2);

assign val_V_1_fu_906_p3 = ((isNeg_1_fu_835_p3[0:0] === 1'b1) ? zext_ln662_fu_892_p1 : tmp_20_fu_896_p4);

assign val_V_2_fu_1007_p3 = ((isNeg_2_fu_936_p3[0:0] === 1'b1) ? zext_ln662_1_fu_993_p1 : tmp_21_fu_997_p4);

assign zext_ln1285_1_fu_868_p1 = $unsigned(sext_ln1311_3_fu_860_p1);

assign zext_ln1285_2_fu_969_p1 = $unsigned(sext_ln1311_5_fu_961_p1);

assign zext_ln1285_fu_708_p1 = $unsigned(sext_ln1311_1_fu_701_p1);

assign zext_ln1287_1_fu_864_p1 = $unsigned(sext_ln1311_3_fu_860_p1);

assign zext_ln1287_2_fu_965_p1 = $unsigned(sext_ln1311_5_fu_961_p1);

assign zext_ln1287_3_fu_718_p1 = r_V_fu_712_p2;

assign zext_ln1287_fu_704_p1 = $unsigned(sext_ln1311_1_fu_701_p1);

assign zext_ln18_1_fu_614_p1 = trunc_ln18_reg_1381;

assign zext_ln18_fu_589_p1 = i_0_reg_386;

assign zext_ln37_1_fu_801_p1 = trunc_ln1_fu_791_p4;

assign zext_ln37_fu_1021_p1 = val_V_reg_1464;

assign zext_ln48_1_fu_1093_p1 = tmp_22_fu_1086_p3;

assign zext_ln48_fu_1057_p1 = trunc_ln48_fu_1053_p1;

assign zext_ln502_1_fu_826_p1 = tmp_V_2_reg_1469;

assign zext_ln502_2_fu_927_p1 = tmp_V_4_reg_1480;

assign zext_ln502_fu_654_p1 = tmp_V_reg_1443;

assign zext_ln51_1_fu_1107_p1 = trunc_ln51_fu_1103_p1;

assign zext_ln51_2_fu_1176_p1 = add_ln51_reg_1601;

assign zext_ln51_3_fu_1119_p1 = or_ln51_fu_1113_p2;

assign zext_ln51_4_fu_1193_p1 = tmp_23_fu_1186_p3;

assign zext_ln51_fu_1125_p1 = j_0_0_reg_453;

assign zext_ln662_1_fu_993_p1 = tmp_28_fu_985_p3;

assign zext_ln662_fu_892_p1 = tmp_24_fu_884_p3;

assign zext_ln66_1_fu_1316_p1 = trunc_ln66_fu_1312_p1;

assign zext_ln66_fu_1322_p1 = i4_0_reg_465;

assign zext_ln682_1_fu_822_p1 = mantissa_V_1_fu_813_p4;

assign zext_ln682_2_fu_923_p1 = mantissa_V_2_fu_914_p4;

assign zext_ln682_fu_697_p1 = mantissa_V_fu_688_p4;

always @ (posedge ap_clk) begin
    rnd_input_reg_1357[13:0] <= 14'b00000000000000;
    zext_ln18_reg_1371[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln37_reg_1518[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln48_1_reg_1567[7:0] <= 8'b00000000;
    zext_ln48_1_reg_1567[15] <= 1'b0;
end

endmodule //QIO_accel_hw_int_s
