// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _QIO_accel_HH_
#define _QIO_accel_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "QIO_accel_hw_int_s.h"
#include "QIO_accel_hw_int_dEe.h"
#include "QIO_accel_coef_lincg.h"
#include "QIO_accel_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct QIO_accel : public sc_module {
    // Port declarations 28
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<32> > input_r_TDATA;
    sc_in< sc_logic > input_r_TVALID;
    sc_out< sc_logic > input_r_TREADY;
    sc_in< sc_lv<1> > input_r_TLAST;
    sc_out< sc_lv<32> > output_r_TDATA;
    sc_out< sc_logic > output_r_TVALID;
    sc_in< sc_logic > output_r_TREADY;
    sc_out< sc_lv<1> > output_r_TLAST;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    QIO_accel(sc_module_name name);
    SC_HAS_PROCESS(QIO_accel);

    ~QIO_accel();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    QIO_accel_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* QIO_accel_AXILiteS_s_axi_U;
    QIO_accel_hw_int_dEe* init_val_U;
    QIO_accel_hw_int_dEe* final_val_U;
    QIO_accel_coef_lincg* coef_list_0_U;
    QIO_accel_coef_lincg* coef_list_1_U;
    QIO_accel_hw_int_s* grp_QIO_accel_hw_int_s_fu_240;
    regslice_both<32>* regslice_both_input_data_V_U;
    regslice_both<1>* regslice_both_input_last_V_U;
    regslice_both<32>* regslice_both_output_data_V_U;
    regslice_both<1>* regslice_both_output_last_V_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > seed;
    sc_signal< sc_logic > input_r_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln48_fu_259_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > icmp_ln54_fu_276_p2;
    sc_signal< sc_logic > output_r_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp2_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter1;
    sc_signal< bool > ap_block_pp2_stage0;
    sc_signal< sc_lv<1> > icmp_ln72_reg_457;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter2;
    sc_signal< sc_lv<1> > icmp_ln72_reg_457_pp2_iter1_reg;
    sc_signal< sc_lv<9> > i_0_i1_reg_229;
    sc_signal< sc_lv<9> > i_fu_265_p2;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<17> > add_ln54_fu_282_p2;
    sc_signal< bool > ap_block_state4;
    sc_signal< sc_lv<9> > select_ln60_1_fu_308_p3;
    sc_signal< sc_lv<9> > j_fu_394_p2;
    sc_signal< sc_lv<32> > seed_read_reg_452;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > icmp_ln72_fu_400_p2;
    sc_signal< bool > ap_block_state7_pp2_stage0_iter0;
    sc_signal< bool > ap_block_state8_pp2_stage0_iter1;
    sc_signal< bool > ap_block_state8_io;
    sc_signal< bool > ap_block_state9_pp2_stage0_iter2;
    sc_signal< bool > ap_block_state9_io;
    sc_signal< bool > ap_block_pp2_stage0_11001;
    sc_signal< sc_lv<9> > i_5_fu_406_p2;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter0;
    sc_signal< sc_lv<1> > icmp_ln75_fu_412_p2;
    sc_signal< sc_lv<1> > icmp_ln75_reg_466;
    sc_signal< sc_lv<32> > final_val_q0;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > grp_QIO_accel_hw_int_s_fu_240_ap_ready;
    sc_signal< sc_logic > grp_QIO_accel_hw_int_s_fu_240_ap_done;
    sc_signal< bool > ap_block_pp2_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp2_exit_iter0_state7;
    sc_signal< sc_lv<8> > init_val_address0;
    sc_signal< sc_logic > init_val_ce0;
    sc_signal< sc_logic > init_val_we0;
    sc_signal< sc_lv<32> > init_val_q0;
    sc_signal< sc_lv<8> > final_val_address0;
    sc_signal< sc_logic > final_val_ce0;
    sc_signal< sc_logic > final_val_we0;
    sc_signal< sc_lv<15> > coef_list_0_address0;
    sc_signal< sc_logic > coef_list_0_ce0;
    sc_signal< sc_logic > coef_list_0_we0;
    sc_signal< sc_lv<32> > coef_list_0_q0;
    sc_signal< sc_logic > coef_list_0_ce1;
    sc_signal< sc_lv<32> > coef_list_0_q1;
    sc_signal< sc_lv<15> > coef_list_1_address0;
    sc_signal< sc_logic > coef_list_1_ce0;
    sc_signal< sc_logic > coef_list_1_we0;
    sc_signal< sc_lv<32> > coef_list_1_q0;
    sc_signal< sc_logic > coef_list_1_ce1;
    sc_signal< sc_lv<32> > coef_list_1_q1;
    sc_signal< sc_logic > grp_QIO_accel_hw_int_s_fu_240_ap_start;
    sc_signal< sc_logic > grp_QIO_accel_hw_int_s_fu_240_ap_idle;
    sc_signal< sc_lv<8> > grp_QIO_accel_hw_int_s_fu_240_init_val_address0;
    sc_signal< sc_logic > grp_QIO_accel_hw_int_s_fu_240_init_val_ce0;
    sc_signal< sc_lv<15> > grp_QIO_accel_hw_int_s_fu_240_coef_list_0_address0;
    sc_signal< sc_logic > grp_QIO_accel_hw_int_s_fu_240_coef_list_0_ce0;
    sc_signal< sc_lv<15> > grp_QIO_accel_hw_int_s_fu_240_coef_list_0_address1;
    sc_signal< sc_logic > grp_QIO_accel_hw_int_s_fu_240_coef_list_0_ce1;
    sc_signal< sc_lv<15> > grp_QIO_accel_hw_int_s_fu_240_coef_list_1_address0;
    sc_signal< sc_logic > grp_QIO_accel_hw_int_s_fu_240_coef_list_1_ce0;
    sc_signal< sc_lv<15> > grp_QIO_accel_hw_int_s_fu_240_coef_list_1_address1;
    sc_signal< sc_logic > grp_QIO_accel_hw_int_s_fu_240_coef_list_1_ce1;
    sc_signal< sc_lv<8> > grp_QIO_accel_hw_int_s_fu_240_final_val_address0;
    sc_signal< sc_logic > grp_QIO_accel_hw_int_s_fu_240_final_val_ce0;
    sc_signal< sc_logic > grp_QIO_accel_hw_int_s_fu_240_final_val_we0;
    sc_signal< sc_lv<32> > grp_QIO_accel_hw_int_s_fu_240_final_val_d0;
    sc_signal< sc_lv<9> > i_0_i_reg_185;
    sc_signal< sc_lv<17> > indvar_flatten_reg_196;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<9> > i1_0_i_reg_207;
    sc_signal< sc_lv<9> > j_0_i_reg_218;
    sc_signal< sc_logic > grp_QIO_accel_hw_int_s_fu_240_ap_start_reg;
    sc_signal< sc_lv<64> > zext_ln50_fu_271_p1;
    sc_signal< sc_lv<64> > zext_ln60_2_fu_388_p1;
    sc_signal< sc_lv<64> > zext_ln78_fu_418_p1;
    sc_signal< bool > ap_block_pp2_stage0_01001;
    sc_signal< sc_lv<1> > select_ln60_2_fu_364_p3;
    sc_signal< sc_lv<32> > bitcast_ln60_fu_372_p1;
    sc_signal< sc_lv<1> > icmp_ln56_fu_294_p2;
    sc_signal< sc_lv<9> > i_4_fu_288_p2;
    sc_signal< sc_lv<7> > trunc_ln60_fu_316_p1;
    sc_signal< sc_lv<15> > tmp_24_fu_320_p3;
    sc_signal< sc_lv<2> > tmp_32_fu_332_p4;
    sc_signal< sc_lv<2> > tmp_33_fu_348_p4;
    sc_signal< sc_lv<1> > icmp_ln60_fu_342_p2;
    sc_signal< sc_lv<1> > icmp_ln60_1_fu_358_p2;
    sc_signal< sc_lv<9> > select_ln60_fu_300_p3;
    sc_signal< sc_lv<16> > zext_ln60_fu_328_p1;
    sc_signal< sc_lv<16> > zext_ln60_1_fu_378_p1;
    sc_signal< sc_lv<16> > add_ln60_fu_382_p2;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_logic > regslice_both_output_data_V_U_apdone_blk;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp2;
    sc_signal< sc_logic > ap_enable_pp2;
    sc_signal< sc_logic > regslice_both_input_data_V_U_apdone_blk;
    sc_signal< sc_lv<32> > input_r_TDATA_int;
    sc_signal< sc_logic > input_r_TVALID_int;
    sc_signal< sc_logic > input_r_TREADY_int;
    sc_signal< sc_logic > regslice_both_input_data_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_input_last_V_U_apdone_blk;
    sc_signal< sc_lv<1> > input_r_TLAST_int;
    sc_signal< sc_logic > regslice_both_input_last_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_input_last_V_U_ack_in;
    sc_signal< sc_logic > output_r_TVALID_int;
    sc_signal< sc_logic > output_r_TREADY_int;
    sc_signal< sc_logic > regslice_both_output_data_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_output_last_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_output_last_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_output_last_V_U_vld_out;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_state3;
    static const sc_lv<8> ap_ST_fsm_state4;
    static const sc_lv<8> ap_ST_fsm_state5;
    static const sc_lv<8> ap_ST_fsm_state6;
    static const sc_lv<8> ap_ST_fsm_pp2_stage0;
    static const sc_lv<8> ap_ST_fsm_state10;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_6;
    static const bool ap_const_boolean_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<17> ap_const_lv17_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<9> ap_const_lv9_100;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<17> ap_const_lv17_10000;
    static const sc_lv<17> ap_const_lv17_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<9> ap_const_lv9_FF;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_add_ln54_fu_282_p2();
    void thread_add_ln60_fu_382_p2();
    void thread_ap_CS_fsm_pp2_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp2_stage0();
    void thread_ap_block_pp2_stage0_01001();
    void thread_ap_block_pp2_stage0_11001();
    void thread_ap_block_pp2_stage0_subdone();
    void thread_ap_block_state2();
    void thread_ap_block_state4();
    void thread_ap_block_state7_pp2_stage0_iter0();
    void thread_ap_block_state8_io();
    void thread_ap_block_state8_pp2_stage0_iter1();
    void thread_ap_block_state9_io();
    void thread_ap_block_state9_pp2_stage0_iter2();
    void thread_ap_condition_pp2_exit_iter0_state7();
    void thread_ap_done();
    void thread_ap_enable_pp2();
    void thread_ap_idle();
    void thread_ap_idle_pp2();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_bitcast_ln60_fu_372_p1();
    void thread_coef_list_0_address0();
    void thread_coef_list_0_ce0();
    void thread_coef_list_0_ce1();
    void thread_coef_list_0_we0();
    void thread_coef_list_1_address0();
    void thread_coef_list_1_ce0();
    void thread_coef_list_1_ce1();
    void thread_coef_list_1_we0();
    void thread_final_val_address0();
    void thread_final_val_ce0();
    void thread_final_val_we0();
    void thread_grp_QIO_accel_hw_int_s_fu_240_ap_start();
    void thread_i_4_fu_288_p2();
    void thread_i_5_fu_406_p2();
    void thread_i_fu_265_p2();
    void thread_icmp_ln48_fu_259_p2();
    void thread_icmp_ln54_fu_276_p2();
    void thread_icmp_ln56_fu_294_p2();
    void thread_icmp_ln60_1_fu_358_p2();
    void thread_icmp_ln60_fu_342_p2();
    void thread_icmp_ln72_fu_400_p2();
    void thread_icmp_ln75_fu_412_p2();
    void thread_init_val_address0();
    void thread_init_val_ce0();
    void thread_init_val_we0();
    void thread_input_r_TDATA_blk_n();
    void thread_input_r_TREADY();
    void thread_input_r_TREADY_int();
    void thread_j_fu_394_p2();
    void thread_output_r_TDATA_blk_n();
    void thread_output_r_TVALID();
    void thread_output_r_TVALID_int();
    void thread_select_ln60_1_fu_308_p3();
    void thread_select_ln60_2_fu_364_p3();
    void thread_select_ln60_fu_300_p3();
    void thread_tmp_24_fu_320_p3();
    void thread_tmp_32_fu_332_p4();
    void thread_tmp_33_fu_348_p4();
    void thread_trunc_ln60_fu_316_p1();
    void thread_zext_ln50_fu_271_p1();
    void thread_zext_ln60_1_fu_378_p1();
    void thread_zext_ln60_2_fu_388_p1();
    void thread_zext_ln60_fu_328_p1();
    void thread_zext_ln78_fu_418_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
