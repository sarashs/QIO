// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module QIO_int_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        current_val_address0,
        current_val_ce0,
        current_val_q0,
        coef_list_address0,
        coef_list_ce0,
        coef_list_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 43'd1;
parameter    ap_ST_fsm_pp0_stage0 = 43'd2;
parameter    ap_ST_fsm_state4 = 43'd4;
parameter    ap_ST_fsm_state5 = 43'd8;
parameter    ap_ST_fsm_state6 = 43'd16;
parameter    ap_ST_fsm_state7 = 43'd32;
parameter    ap_ST_fsm_state8 = 43'd64;
parameter    ap_ST_fsm_state9 = 43'd128;
parameter    ap_ST_fsm_state10 = 43'd256;
parameter    ap_ST_fsm_state11 = 43'd512;
parameter    ap_ST_fsm_state12 = 43'd1024;
parameter    ap_ST_fsm_state13 = 43'd2048;
parameter    ap_ST_fsm_state14 = 43'd4096;
parameter    ap_ST_fsm_state15 = 43'd8192;
parameter    ap_ST_fsm_state16 = 43'd16384;
parameter    ap_ST_fsm_state17 = 43'd32768;
parameter    ap_ST_fsm_state18 = 43'd65536;
parameter    ap_ST_fsm_state19 = 43'd131072;
parameter    ap_ST_fsm_state20 = 43'd262144;
parameter    ap_ST_fsm_state21 = 43'd524288;
parameter    ap_ST_fsm_state22 = 43'd1048576;
parameter    ap_ST_fsm_state23 = 43'd2097152;
parameter    ap_ST_fsm_state24 = 43'd4194304;
parameter    ap_ST_fsm_state25 = 43'd8388608;
parameter    ap_ST_fsm_state26 = 43'd16777216;
parameter    ap_ST_fsm_state27 = 43'd33554432;
parameter    ap_ST_fsm_state28 = 43'd67108864;
parameter    ap_ST_fsm_state29 = 43'd134217728;
parameter    ap_ST_fsm_state30 = 43'd268435456;
parameter    ap_ST_fsm_state31 = 43'd536870912;
parameter    ap_ST_fsm_state32 = 43'd1073741824;
parameter    ap_ST_fsm_state33 = 43'd2147483648;
parameter    ap_ST_fsm_state34 = 43'd4294967296;
parameter    ap_ST_fsm_state35 = 43'd8589934592;
parameter    ap_ST_fsm_state36 = 43'd17179869184;
parameter    ap_ST_fsm_state37 = 43'd34359738368;
parameter    ap_ST_fsm_state38 = 43'd68719476736;
parameter    ap_ST_fsm_state39 = 43'd137438953472;
parameter    ap_ST_fsm_state40 = 43'd274877906944;
parameter    ap_ST_fsm_state41 = 43'd549755813888;
parameter    ap_ST_fsm_state42 = 43'd1099511627776;
parameter    ap_ST_fsm_state43 = 43'd2199023255552;
parameter    ap_ST_fsm_state44 = 43'd4398046511104;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] current_val_address0;
output   current_val_ce0;
input  [31:0] current_val_q0;
output  [15:0] coef_list_address0;
output   coef_list_ce0;
input  [31:0] coef_list_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] current_val_address0;
reg current_val_ce0;
reg[15:0] coef_list_address0;
reg coef_list_ce0;

(* fsm_encoding = "none" *) reg   [42:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] i_0_reg_120;
reg   [31:0] reg_167;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state34;
wire   [31:0] grp_fu_156_p2;
reg   [31:0] reg_172;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state39;
wire   [31:0] grp_fu_152_p2;
reg   [31:0] reg_183;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state43;
wire   [0:0] icmp_ln26_fu_192_p2;
reg   [0:0] icmp_ln26_reg_292;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [8:0] i_fu_198_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] zext_ln28_fu_204_p1;
reg   [63:0] zext_ln28_reg_301;
wire   [31:0] zext_ln31_fu_214_p1;
reg   [31:0] zext_ln31_reg_318;
wire    ap_CS_fsm_state5;
wire   [8:0] i_6_fu_224_p2;
reg   [8:0] i_6_reg_326;
wire   [0:0] icmp_ln31_fu_218_p2;
reg   [31:0] current_val_load_2_reg_336;
wire    ap_CS_fsm_state6;
wire   [17:0] zext_ln32_2_fu_247_p1;
reg   [17:0] zext_ln32_2_reg_341;
wire    ap_CS_fsm_state11;
wire   [31:0] grp_fu_160_p1;
reg   [31:0] tmp_reg_351;
wire  signed [31:0] j_fu_262_p2;
reg  signed [31:0] j_reg_356;
wire    ap_CS_fsm_state23;
wire   [17:0] add_ln35_fu_283_p2;
reg   [17:0] add_ln35_reg_364;
wire   [0:0] icmp_ln34_fu_268_p2;
wire   [31:0] current_val2_q0;
reg   [31:0] current_val2_load_reg_374;
wire    ap_CS_fsm_state24;
reg   [31:0] tmp_2_reg_379;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state33;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg   [7:0] current_val2_address0;
reg    current_val2_ce0;
reg    current_val2_we0;
reg   [8:0] i1_0_reg_131;
wire    ap_CS_fsm_state4;
reg   [31:0] j_0_in_reg_143;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state44;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln32_fu_230_p1;
wire   [63:0] zext_ln32_3_fu_257_p1;
wire  signed [63:0] sext_ln35_fu_274_p1;
wire  signed [63:0] sext_ln35_1_fu_288_p1;
reg   [31:0] cost_new_write_assig_fu_54;
reg   [31:0] grp_fu_156_p0;
reg   [31:0] grp_fu_156_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state35;
reg   [31:0] grp_fu_160_p0;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state25;
wire   [16:0] tmp_1_fu_239_p3;
wire   [17:0] zext_ln32_1_fu_235_p1;
wire   [17:0] add_ln32_fu_251_p2;
wire   [17:0] trunc_ln35_fu_279_p1;
reg   [42:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 43'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

QIO_int_s_currentbkb #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
current_val2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(current_val2_address0),
    .ce0(current_val2_ce0),
    .we0(current_val2_we0),
    .d0(current_val_q0),
    .q0(current_val2_q0)
);

QIO_accel_fadd_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
QIO_accel_fadd_32cud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(cost_new_write_assig_fu_54),
    .din1(reg_172),
    .ce(1'b1),
    .dout(grp_fu_152_p2)
);

QIO_accel_fmul_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
QIO_accel_fmul_32dEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_156_p0),
    .din1(grp_fu_156_p1),
    .ce(1'b1),
    .dout(grp_fu_156_p2)
);

QIO_accel_sitofp_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
QIO_accel_sitofp_eOg_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_160_p0),
    .ce(1'b1),
    .dout(grp_fu_160_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state22))) begin
        cost_new_write_assig_fu_54 <= reg_183;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        cost_new_write_assig_fu_54 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i1_0_reg_131 <= 9'd0;
    end else if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln34_fu_268_p2 == 1'd1))) begin
        i1_0_reg_131 <= i_6_reg_326;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln26_fu_192_p2 == 1'd0))) begin
        i_0_reg_120 <= i_fu_198_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_120 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        j_0_in_reg_143 <= j_reg_356;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        j_0_in_reg_143 <= zext_ln31_reg_318;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln34_fu_268_p2 == 1'd0))) begin
        add_ln35_reg_364 <= add_ln35_fu_283_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        current_val2_load_reg_374 <= current_val2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        current_val_load_2_reg_336 <= current_val_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_6_reg_326 <= i_6_fu_224_p2;
        zext_ln31_reg_318[8 : 0] <= zext_ln31_fu_214_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln26_reg_292 <= icmp_ln26_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        j_reg_356 <= j_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_167 <= coef_list_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state38))) begin
        reg_172 <= grp_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state21))) begin
        reg_183 <= grp_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        tmp_2_reg_379 <= grp_fu_160_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_reg_351 <= grp_fu_160_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln26_fu_192_p2 == 1'd0))) begin
        zext_ln28_reg_301[8 : 0] <= zext_ln28_fu_204_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        zext_ln32_2_reg_341[16 : 8] <= zext_ln32_2_fu_247_p1[16 : 8];
    end
end

always @ (*) begin
    if ((icmp_ln26_fu_192_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln31_fu_218_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln31_fu_218_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        coef_list_address0 = sext_ln35_1_fu_288_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        coef_list_address0 = zext_ln32_3_fu_257_p1;
    end else begin
        coef_list_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state11))) begin
        coef_list_ce0 = 1'b1;
    end else begin
        coef_list_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        current_val2_address0 = sext_ln35_fu_274_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_val2_address0 = zext_ln28_reg_301;
    end else begin
        current_val2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        current_val2_ce0 = 1'b1;
    end else begin
        current_val2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln26_reg_292 == 1'd0))) begin
        current_val2_we0 = 1'b1;
    end else begin
        current_val2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        current_val_address0 = zext_ln32_fu_230_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_val_address0 = zext_ln28_fu_204_p1;
    end else begin
        current_val_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        current_val_ce0 = 1'b1;
    end else begin
        current_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_156_p0 = reg_172;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state13))) begin
        grp_fu_156_p0 = tmp_reg_351;
    end else begin
        grp_fu_156_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_156_p1 = tmp_2_reg_379;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state13))) begin
        grp_fu_156_p1 = reg_167;
    end else begin
        grp_fu_156_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_160_p0 = current_val2_load_reg_374;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_160_p0 = current_val_load_2_reg_336;
    end else begin
        grp_fu_160_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln26_fu_192_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln26_fu_192_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln31_fu_218_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln34_fu_268_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln32_fu_251_p2 = (zext_ln32_1_fu_235_p1 + zext_ln32_2_fu_247_p1);

assign add_ln35_fu_283_p2 = (zext_ln32_2_reg_341 + trunc_ln35_fu_279_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = cost_new_write_assig_fu_54;

assign i_6_fu_224_p2 = (i1_0_reg_131 + 9'd1);

assign i_fu_198_p2 = (i_0_reg_120 + 9'd1);

assign icmp_ln26_fu_192_p2 = ((i_0_reg_120 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_218_p2 = ((i1_0_reg_131 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_268_p2 = ((j_0_in_reg_143 == 32'd255) ? 1'b1 : 1'b0);

assign j_fu_262_p2 = (j_0_in_reg_143 + 32'd1);

assign sext_ln35_1_fu_288_p1 = $signed(add_ln35_reg_364);

assign sext_ln35_fu_274_p1 = j_fu_262_p2;

assign tmp_1_fu_239_p3 = {{i1_0_reg_131}, {8'd0}};

assign trunc_ln35_fu_279_p1 = j_fu_262_p2[17:0];

assign zext_ln28_fu_204_p1 = i_0_reg_120;

assign zext_ln31_fu_214_p1 = i1_0_reg_131;

assign zext_ln32_1_fu_235_p1 = i1_0_reg_131;

assign zext_ln32_2_fu_247_p1 = tmp_1_fu_239_p3;

assign zext_ln32_3_fu_257_p1 = add_ln32_fu_251_p2;

assign zext_ln32_fu_230_p1 = i1_0_reg_131;

always @ (posedge ap_clk) begin
    zext_ln28_reg_301[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln31_reg_318[31:9] <= 23'b00000000000000000000000;
    zext_ln32_2_reg_341[7:0] <= 8'b00000000;
    zext_ln32_2_reg_341[17] <= 1'b0;
end

endmodule //QIO_int_s
